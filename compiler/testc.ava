fib :: (n: int) -> int do
    z: int
    a := 0
    b := 1
    i := 0

    while i < n do
        z = a + b
        a = b
        b = z
        i = i + 1
    end

    return a
end

fact :: (n: int) -> int do
    if n == 0 then
        return 1
    end
    return n * fact(n - 1)
end

hanoi :: (n: int, fromrod: int, torod: int, auxrod: int) do
    if (n == 1) then
        return
    end

    hanoi(n - 1, fromrod, auxrod, torod);
    hanoi(n - 1, auxrod, torod, fromrod);
end

main :: () -> int do
    array : [] of int

    array = append(array, 12)
    array = append(array, 13)
    array[1] = 14

    printf("%ncount: %d, cap: %d%n", array[-1], array[-2])
    printf("first: %d, last: %d%n", array[0], array[array[-1]-1])

    printf("[")
    i := 0

    while i < array[-1] do
        printf("%d, ", array[i])
        i = i + 1
    end
    printf("]%n")
    printf("free?: ")

    if array[-3] == 2 then
        printf("NO%n%n")
    else
        printf("YES%n%n")
    end
    return 0
end

#extern printf :: (fmt: str, e: $$ #unchecked) -> void
#extern append :: (a: []$, e: $) -> int
#extern read_int :: (fmt: int) -> int
