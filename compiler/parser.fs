// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.y"

open Ast

# 10 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | Empty
  | EOF
  | EOL
  | KW_COUNT
  | KW_EXPORT
  | KW_CONTINUE
  | KW_BREAK
  | KW_RETURN
  | KW_ELSIF
  | KW_ELSE
  | KW_OF
  | KW_END
  | KW_DO
  | KW_WHILE
  | KW_THEN
  | KW_IF
  | RARROW
  | RBRACKET
  | LBRACKET
  | RPAREN
  | LPAREN
  | AMP
  | KW_NOT
  | KW_AND
  | KW_OR
  | GREATER
  | GREATER_EQUALS
  | LESS
  | LESS_EQUALS
  | KW_IS
  | LESS_GREATER
  | DOUBLE_EQUALS
  | PERCENT
  | ASTERISK
  | FSLASH
  | PLUS
  | MINUS
  | COLON_EQUALS
  | DOUBLE_COLON
  | SINGLE_EQUALS
  | DOT
  | COLON
  | SEMI_COLON
  | COMMA
  | KW_TEXT
  | KW_STRING
  | KW_CHAR
  | KW_BYTE
  | KW_INT
  | KW_VOID
  | KW_FLOAT
  | IDENT of (string)
  | BYTE_LITERAL of (byte)
  | TEXT_LITERAL of (string)
  | STRING_LITERAL of (string)
  | FLOAT_LITERAL of (float32)
  | CHAR_LITERAL of (char)
  | INT_LITERAL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_Empty
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_KW_COUNT
    | TOKEN_KW_EXPORT
    | TOKEN_KW_CONTINUE
    | TOKEN_KW_BREAK
    | TOKEN_KW_RETURN
    | TOKEN_KW_ELSIF
    | TOKEN_KW_ELSE
    | TOKEN_KW_OF
    | TOKEN_KW_END
    | TOKEN_KW_DO
    | TOKEN_KW_WHILE
    | TOKEN_KW_THEN
    | TOKEN_KW_IF
    | TOKEN_RARROW
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AMP
    | TOKEN_KW_NOT
    | TOKEN_KW_AND
    | TOKEN_KW_OR
    | TOKEN_GREATER
    | TOKEN_GREATER_EQUALS
    | TOKEN_LESS
    | TOKEN_LESS_EQUALS
    | TOKEN_KW_IS
    | TOKEN_LESS_GREATER
    | TOKEN_DOUBLE_EQUALS
    | TOKEN_PERCENT
    | TOKEN_ASTERISK
    | TOKEN_FSLASH
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_COLON_EQUALS
    | TOKEN_DOUBLE_COLON
    | TOKEN_SINGLE_EQUALS
    | TOKEN_DOT
    | TOKEN_COLON
    | TOKEN_SEMI_COLON
    | TOKEN_COMMA
    | TOKEN_KW_TEXT
    | TOKEN_KW_STRING
    | TOKEN_KW_CHAR
    | TOKEN_KW_BYTE
    | TOKEN_KW_INT
    | TOKEN_KW_VOID
    | TOKEN_KW_FLOAT
    | TOKEN_IDENT
    | TOKEN_BYTE_LITERAL
    | TOKEN_TEXT_LITERAL
    | TOKEN_STRING_LITERAL
    | TOKEN_FLOAT_LITERAL
    | TOKEN_CHAR_LITERAL
    | TOKEN_INT_LITERAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_program
    | NONTERM_decl_list
    | NONTERM_decl
    | NONTERM_type_spec
    | NONTERM_constant_decl
    | NONTERM_variable_decl
    | NONTERM_procedure_decl
    | NONTERM_parameters
    | NONTERM_parameter_list
    | NONTERM_parameter
    | NONTERM_stmt_list
    | NONTERM_stmt
    | NONTERM_sexpr
    | NONTERM_while_stmt
    | NONTERM_if_stmt
    | NONTERM_condition
    | NONTERM_compound_stmt
    | NONTERM_break_stmt
    | NONTERM_continue_stmt
    | NONTERM_return_stmt
    | NONTERM_expr
    | NONTERM_unary_expr
    | NONTERM_arguments
    | NONTERM_literal

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | Empty  -> 0 
  | EOF  -> 1 
  | EOL  -> 2 
  | KW_COUNT  -> 3 
  | KW_EXPORT  -> 4 
  | KW_CONTINUE  -> 5 
  | KW_BREAK  -> 6 
  | KW_RETURN  -> 7 
  | KW_ELSIF  -> 8 
  | KW_ELSE  -> 9 
  | KW_OF  -> 10 
  | KW_END  -> 11 
  | KW_DO  -> 12 
  | KW_WHILE  -> 13 
  | KW_THEN  -> 14 
  | KW_IF  -> 15 
  | RARROW  -> 16 
  | RBRACKET  -> 17 
  | LBRACKET  -> 18 
  | RPAREN  -> 19 
  | LPAREN  -> 20 
  | AMP  -> 21 
  | KW_NOT  -> 22 
  | KW_AND  -> 23 
  | KW_OR  -> 24 
  | GREATER  -> 25 
  | GREATER_EQUALS  -> 26 
  | LESS  -> 27 
  | LESS_EQUALS  -> 28 
  | KW_IS  -> 29 
  | LESS_GREATER  -> 30 
  | DOUBLE_EQUALS  -> 31 
  | PERCENT  -> 32 
  | ASTERISK  -> 33 
  | FSLASH  -> 34 
  | PLUS  -> 35 
  | MINUS  -> 36 
  | COLON_EQUALS  -> 37 
  | DOUBLE_COLON  -> 38 
  | SINGLE_EQUALS  -> 39 
  | DOT  -> 40 
  | COLON  -> 41 
  | SEMI_COLON  -> 42 
  | COMMA  -> 43 
  | KW_TEXT  -> 44 
  | KW_STRING  -> 45 
  | KW_CHAR  -> 46 
  | KW_BYTE  -> 47 
  | KW_INT  -> 48 
  | KW_VOID  -> 49 
  | KW_FLOAT  -> 50 
  | IDENT _ -> 51 
  | BYTE_LITERAL _ -> 52 
  | TEXT_LITERAL _ -> 53 
  | STRING_LITERAL _ -> 54 
  | FLOAT_LITERAL _ -> 55 
  | CHAR_LITERAL _ -> 56 
  | INT_LITERAL _ -> 57 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_Empty 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_EOL 
  | 3 -> TOKEN_KW_COUNT 
  | 4 -> TOKEN_KW_EXPORT 
  | 5 -> TOKEN_KW_CONTINUE 
  | 6 -> TOKEN_KW_BREAK 
  | 7 -> TOKEN_KW_RETURN 
  | 8 -> TOKEN_KW_ELSIF 
  | 9 -> TOKEN_KW_ELSE 
  | 10 -> TOKEN_KW_OF 
  | 11 -> TOKEN_KW_END 
  | 12 -> TOKEN_KW_DO 
  | 13 -> TOKEN_KW_WHILE 
  | 14 -> TOKEN_KW_THEN 
  | 15 -> TOKEN_KW_IF 
  | 16 -> TOKEN_RARROW 
  | 17 -> TOKEN_RBRACKET 
  | 18 -> TOKEN_LBRACKET 
  | 19 -> TOKEN_RPAREN 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_AMP 
  | 22 -> TOKEN_KW_NOT 
  | 23 -> TOKEN_KW_AND 
  | 24 -> TOKEN_KW_OR 
  | 25 -> TOKEN_GREATER 
  | 26 -> TOKEN_GREATER_EQUALS 
  | 27 -> TOKEN_LESS 
  | 28 -> TOKEN_LESS_EQUALS 
  | 29 -> TOKEN_KW_IS 
  | 30 -> TOKEN_LESS_GREATER 
  | 31 -> TOKEN_DOUBLE_EQUALS 
  | 32 -> TOKEN_PERCENT 
  | 33 -> TOKEN_ASTERISK 
  | 34 -> TOKEN_FSLASH 
  | 35 -> TOKEN_PLUS 
  | 36 -> TOKEN_MINUS 
  | 37 -> TOKEN_COLON_EQUALS 
  | 38 -> TOKEN_DOUBLE_COLON 
  | 39 -> TOKEN_SINGLE_EQUALS 
  | 40 -> TOKEN_DOT 
  | 41 -> TOKEN_COLON 
  | 42 -> TOKEN_SEMI_COLON 
  | 43 -> TOKEN_COMMA 
  | 44 -> TOKEN_KW_TEXT 
  | 45 -> TOKEN_KW_STRING 
  | 46 -> TOKEN_KW_CHAR 
  | 47 -> TOKEN_KW_BYTE 
  | 48 -> TOKEN_KW_INT 
  | 49 -> TOKEN_KW_VOID 
  | 50 -> TOKEN_KW_FLOAT 
  | 51 -> TOKEN_IDENT 
  | 52 -> TOKEN_BYTE_LITERAL 
  | 53 -> TOKEN_TEXT_LITERAL 
  | 54 -> TOKEN_STRING_LITERAL 
  | 55 -> TOKEN_FLOAT_LITERAL 
  | 56 -> TOKEN_CHAR_LITERAL 
  | 57 -> TOKEN_INT_LITERAL 
  | 60 -> TOKEN_end_of_input
  | 58 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_decl_list 
    | 4 -> NONTERM_decl_list 
    | 5 -> NONTERM_decl 
    | 6 -> NONTERM_decl 
    | 7 -> NONTERM_decl 
    | 8 -> NONTERM_decl 
    | 9 -> NONTERM_type_spec 
    | 10 -> NONTERM_type_spec 
    | 11 -> NONTERM_type_spec 
    | 12 -> NONTERM_type_spec 
    | 13 -> NONTERM_type_spec 
    | 14 -> NONTERM_type_spec 
    | 15 -> NONTERM_type_spec 
    | 16 -> NONTERM_constant_decl 
    | 17 -> NONTERM_variable_decl 
    | 18 -> NONTERM_variable_decl 
    | 19 -> NONTERM_variable_decl 
    | 20 -> NONTERM_variable_decl 
    | 21 -> NONTERM_procedure_decl 
    | 22 -> NONTERM_procedure_decl 
    | 23 -> NONTERM_procedure_decl 
    | 24 -> NONTERM_procedure_decl 
    | 25 -> NONTERM_procedure_decl 
    | 26 -> NONTERM_parameters 
    | 27 -> NONTERM_parameters 
    | 28 -> NONTERM_parameter_list 
    | 29 -> NONTERM_parameter_list 
    | 30 -> NONTERM_parameter 
    | 31 -> NONTERM_parameter 
    | 32 -> NONTERM_parameter 
    | 33 -> NONTERM_stmt_list 
    | 34 -> NONTERM_stmt_list 
    | 35 -> NONTERM_stmt 
    | 36 -> NONTERM_stmt 
    | 37 -> NONTERM_stmt 
    | 38 -> NONTERM_stmt 
    | 39 -> NONTERM_stmt 
    | 40 -> NONTERM_stmt 
    | 41 -> NONTERM_stmt 
    | 42 -> NONTERM_stmt 
    | 43 -> NONTERM_sexpr 
    | 44 -> NONTERM_sexpr 
    | 45 -> NONTERM_while_stmt 
    | 46 -> NONTERM_if_stmt 
    | 47 -> NONTERM_if_stmt 
    | 48 -> NONTERM_condition 
    | 49 -> NONTERM_compound_stmt 
    | 50 -> NONTERM_compound_stmt 
    | 51 -> NONTERM_break_stmt 
    | 52 -> NONTERM_continue_stmt 
    | 53 -> NONTERM_return_stmt 
    | 54 -> NONTERM_return_stmt 
    | 55 -> NONTERM_expr 
    | 56 -> NONTERM_expr 
    | 57 -> NONTERM_expr 
    | 58 -> NONTERM_expr 
    | 59 -> NONTERM_expr 
    | 60 -> NONTERM_expr 
    | 61 -> NONTERM_expr 
    | 62 -> NONTERM_expr 
    | 63 -> NONTERM_expr 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_expr 
    | 66 -> NONTERM_expr 
    | 67 -> NONTERM_expr 
    | 68 -> NONTERM_expr 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr 
    | 73 -> NONTERM_expr 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_expr 
    | 79 -> NONTERM_unary_expr 
    | 80 -> NONTERM_unary_expr 
    | 81 -> NONTERM_unary_expr 
    | 82 -> NONTERM_arguments 
    | 83 -> NONTERM_arguments 
    | 84 -> NONTERM_literal 
    | 85 -> NONTERM_literal 
    | 86 -> NONTERM_literal 
    | 87 -> NONTERM_literal 
    | 88 -> NONTERM_literal 
    | 89 -> NONTERM_literal 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 60 
let _fsyacc_tagOfErrorTerminal = 58

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | Empty  -> "Empty" 
  | EOF  -> "EOF" 
  | EOL  -> "EOL" 
  | KW_COUNT  -> "KW_COUNT" 
  | KW_EXPORT  -> "KW_EXPORT" 
  | KW_CONTINUE  -> "KW_CONTINUE" 
  | KW_BREAK  -> "KW_BREAK" 
  | KW_RETURN  -> "KW_RETURN" 
  | KW_ELSIF  -> "KW_ELSIF" 
  | KW_ELSE  -> "KW_ELSE" 
  | KW_OF  -> "KW_OF" 
  | KW_END  -> "KW_END" 
  | KW_DO  -> "KW_DO" 
  | KW_WHILE  -> "KW_WHILE" 
  | KW_THEN  -> "KW_THEN" 
  | KW_IF  -> "KW_IF" 
  | RARROW  -> "RARROW" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AMP  -> "AMP" 
  | KW_NOT  -> "KW_NOT" 
  | KW_AND  -> "KW_AND" 
  | KW_OR  -> "KW_OR" 
  | GREATER  -> "GREATER" 
  | GREATER_EQUALS  -> "GREATER_EQUALS" 
  | LESS  -> "LESS" 
  | LESS_EQUALS  -> "LESS_EQUALS" 
  | KW_IS  -> "KW_IS" 
  | LESS_GREATER  -> "LESS_GREATER" 
  | DOUBLE_EQUALS  -> "DOUBLE_EQUALS" 
  | PERCENT  -> "PERCENT" 
  | ASTERISK  -> "ASTERISK" 
  | FSLASH  -> "FSLASH" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | COLON_EQUALS  -> "COLON_EQUALS" 
  | DOUBLE_COLON  -> "DOUBLE_COLON" 
  | SINGLE_EQUALS  -> "SINGLE_EQUALS" 
  | DOT  -> "DOT" 
  | COLON  -> "COLON" 
  | SEMI_COLON  -> "SEMI_COLON" 
  | COMMA  -> "COMMA" 
  | KW_TEXT  -> "KW_TEXT" 
  | KW_STRING  -> "KW_STRING" 
  | KW_CHAR  -> "KW_CHAR" 
  | KW_BYTE  -> "KW_BYTE" 
  | KW_INT  -> "KW_INT" 
  | KW_VOID  -> "KW_VOID" 
  | KW_FLOAT  -> "KW_FLOAT" 
  | IDENT _ -> "IDENT" 
  | BYTE_LITERAL _ -> "BYTE_LITERAL" 
  | TEXT_LITERAL _ -> "TEXT_LITERAL" 
  | STRING_LITERAL _ -> "STRING_LITERAL" 
  | FLOAT_LITERAL _ -> "FLOAT_LITERAL" 
  | CHAR_LITERAL _ -> "CHAR_LITERAL" 
  | INT_LITERAL _ -> "INT_LITERAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | Empty  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | EOL  -> (null : System.Object) 
  | KW_COUNT  -> (null : System.Object) 
  | KW_EXPORT  -> (null : System.Object) 
  | KW_CONTINUE  -> (null : System.Object) 
  | KW_BREAK  -> (null : System.Object) 
  | KW_RETURN  -> (null : System.Object) 
  | KW_ELSIF  -> (null : System.Object) 
  | KW_ELSE  -> (null : System.Object) 
  | KW_OF  -> (null : System.Object) 
  | KW_END  -> (null : System.Object) 
  | KW_DO  -> (null : System.Object) 
  | KW_WHILE  -> (null : System.Object) 
  | KW_THEN  -> (null : System.Object) 
  | KW_IF  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | KW_NOT  -> (null : System.Object) 
  | KW_AND  -> (null : System.Object) 
  | KW_OR  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | GREATER_EQUALS  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LESS_EQUALS  -> (null : System.Object) 
  | KW_IS  -> (null : System.Object) 
  | LESS_GREATER  -> (null : System.Object) 
  | DOUBLE_EQUALS  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | FSLASH  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | COLON_EQUALS  -> (null : System.Object) 
  | DOUBLE_COLON  -> (null : System.Object) 
  | SINGLE_EQUALS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMI_COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | KW_TEXT  -> (null : System.Object) 
  | KW_STRING  -> (null : System.Object) 
  | KW_CHAR  -> (null : System.Object) 
  | KW_BYTE  -> (null : System.Object) 
  | KW_INT  -> (null : System.Object) 
  | KW_VOID  -> (null : System.Object) 
  | KW_FLOAT  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BYTE_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXT_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 3us; 9us; 65535us; 0us; 6us; 3us; 5us; 74us; 79us; 75us; 79us; 76us; 79us; 90us; 79us; 95us; 79us; 98us; 79us; 102us; 79us; 9us; 65535us; 23us; 24us; 32us; 33us; 37us; 38us; 43us; 44us; 47us; 48us; 58us; 59us; 67us; 68us; 70us; 73us; 71us; 72us; 9us; 65535us; 0us; 8us; 3us; 8us; 74us; 8us; 75us; 8us; 76us; 8us; 90us; 8us; 95us; 8us; 98us; 8us; 102us; 8us; 9us; 65535us; 0us; 7us; 3us; 7us; 74us; 7us; 75us; 7us; 76us; 7us; 90us; 7us; 95us; 7us; 98us; 7us; 102us; 7us; 9us; 65535us; 0us; 9us; 3us; 9us; 74us; 9us; 75us; 9us; 76us; 9us; 90us; 9us; 95us; 9us; 98us; 9us; 102us; 9us; 2us; 65535us; 40us; 41us; 55us; 56us; 2us; 65535us; 40us; 61us; 55us; 61us; 3us; 65535us; 40us; 65us; 55us; 65us; 63us; 64us; 3us; 65535us; 95us; 74us; 98us; 75us; 102us; 76us; 7us; 65535us; 74us; 77us; 75us; 77us; 76us; 77us; 90us; 91us; 95us; 78us; 98us; 78us; 102us; 78us; 7us; 65535us; 74us; 80us; 75us; 80us; 76us; 80us; 90us; 80us; 95us; 80us; 98us; 80us; 102us; 80us; 7us; 65535us; 74us; 83us; 75us; 83us; 76us; 83us; 90us; 83us; 95us; 83us; 98us; 83us; 102us; 83us; 7us; 65535us; 74us; 82us; 75us; 82us; 76us; 82us; 90us; 82us; 95us; 82us; 98us; 82us; 102us; 82us; 0us; 65535us; 12us; 65535us; 42us; 50us; 44us; 45us; 46us; 51us; 48us; 49us; 59us; 60us; 74us; 81us; 75us; 81us; 76us; 81us; 90us; 81us; 95us; 81us; 98us; 81us; 102us; 81us; 7us; 65535us; 74us; 85us; 75us; 85us; 76us; 85us; 90us; 85us; 95us; 85us; 98us; 85us; 102us; 85us; 7us; 65535us; 74us; 86us; 75us; 86us; 76us; 86us; 90us; 86us; 95us; 86us; 98us; 86us; 102us; 86us; 7us; 65535us; 74us; 84us; 75us; 84us; 76us; 84us; 90us; 84us; 95us; 84us; 98us; 84us; 102us; 84us; 36us; 65535us; 26us; 27us; 74us; 87us; 75us; 87us; 76us; 87us; 89us; 90us; 90us; 87us; 92us; 93us; 95us; 87us; 98us; 87us; 102us; 87us; 111us; 112us; 116us; 117us; 118us; 119us; 121us; 122us; 145us; 123us; 146us; 124us; 147us; 125us; 148us; 126us; 149us; 127us; 150us; 128us; 151us; 129us; 152us; 130us; 153us; 131us; 154us; 132us; 155us; 133us; 156us; 134us; 157us; 135us; 158us; 136us; 159us; 137us; 160us; 138us; 162us; 139us; 164us; 144us; 171us; 140us; 172us; 141us; 173us; 142us; 174us; 143us; 36us; 65535us; 26us; 161us; 74us; 161us; 75us; 161us; 76us; 161us; 89us; 161us; 90us; 161us; 92us; 161us; 95us; 161us; 98us; 161us; 102us; 161us; 111us; 161us; 116us; 161us; 118us; 161us; 121us; 161us; 145us; 161us; 146us; 161us; 147us; 161us; 148us; 161us; 149us; 161us; 150us; 161us; 151us; 161us; 152us; 161us; 153us; 161us; 154us; 161us; 155us; 161us; 156us; 161us; 157us; 161us; 158us; 161us; 159us; 161us; 160us; 161us; 162us; 161us; 164us; 161us; 171us; 161us; 172us; 161us; 173us; 161us; 174us; 161us; 1us; 65535us; 164us; 165us; 37us; 65535us; 21us; 22us; 26us; 170us; 74us; 170us; 75us; 170us; 76us; 170us; 89us; 170us; 90us; 170us; 92us; 170us; 95us; 170us; 98us; 170us; 102us; 170us; 111us; 170us; 116us; 170us; 118us; 170us; 121us; 170us; 145us; 170us; 146us; 170us; 147us; 170us; 148us; 170us; 149us; 170us; 150us; 170us; 151us; 170us; 152us; 170us; 153us; 170us; 154us; 170us; 155us; 170us; 156us; 170us; 157us; 170us; 158us; 170us; 159us; 170us; 160us; 170us; 162us; 170us; 164us; 170us; 171us; 170us; 172us; 170us; 173us; 170us; 174us; 170us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 17us; 27us; 37us; 47us; 57us; 60us; 63us; 67us; 71us; 79us; 87us; 95us; 103us; 104us; 117us; 125us; 133us; 141us; 178us; 215us; 217us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 8us; 44us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 9us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 55us; 56us; 73us; 74us; 75us; 76us; 77us; 5us; 16us; 21us; 22us; 23us; 24us; 1us; 16us; 2us; 17us; 18us; 2us; 17us; 18us; 1us; 17us; 1us; 18us; 15us; 18us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 1us; 18us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 4us; 21us; 22us; 23us; 24us; 2us; 21us; 23us; 2us; 21us; 23us; 1us; 21us; 1us; 21us; 1us; 21us; 2us; 22us; 24us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 2us; 26us; 28us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 29us; 3us; 30us; 31us; 32us; 3us; 30us; 31us; 32us; 1us; 30us; 2us; 31us; 32us; 2us; 31us; 32us; 1us; 31us; 1us; 31us; 1us; 32us; 3us; 33us; 46us; 47us; 2us; 33us; 47us; 2us; 33us; 49us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 15us; 43us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 1us; 43us; 1us; 45us; 15us; 45us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 1us; 45us; 2us; 46us; 47us; 16us; 46us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 2us; 46us; 47us; 2us; 46us; 47us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 2us; 49us; 50us; 2us; 49us; 50us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 2us; 53us; 54us; 15us; 53us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 1us; 53us; 1us; 54us; 7us; 55us; 56us; 73us; 74us; 75us; 76us; 77us; 1us; 55us; 15us; 55us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 2us; 56us; 74us; 16us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 74us; 2us; 56us; 74us; 1us; 56us; 15us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 65us; 66us; 67us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 16us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 81us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 16us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 80us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 68us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 70us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 72us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 79us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 80us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 81us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 82us; 15us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 83us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 2us; 66us; 81us; 1us; 67us; 2us; 67us; 80us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 72us; 2us; 75us; 76us; 2us; 75us; 82us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 89us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 50us; 67us; 73us; 75us; 78us; 81us; 83us; 85us; 101us; 103us; 106us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 132us; 135us; 138us; 140us; 142us; 144us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 178us; 180us; 182us; 184us; 186us; 190us; 194us; 196us; 199us; 202us; 204us; 206us; 208us; 212us; 215us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 254us; 256us; 258us; 274us; 276us; 279us; 296us; 299us; 302us; 304us; 306us; 308us; 310us; 312us; 315us; 318us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 337us; 353us; 355us; 357us; 365us; 367us; 383us; 386us; 403us; 406us; 408us; 424us; 440us; 456us; 472us; 488us; 504us; 520us; 536us; 552us; 568us; 584us; 601us; 617us; 634us; 650us; 666us; 682us; 698us; 714us; 730us; 746us; 762us; 778us; 780us; 782us; 784us; 786us; 788us; 790us; 792us; 794us; 796us; 798us; 801us; 803us; 806us; 808us; 810us; 812us; 814us; 816us; 818us; 821us; 824us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 848us; 850us; 852us; |]
let _fsyacc_action_rows = 181
let _fsyacc_actionTableElements = [|3us; 32768us; 2us; 10us; 4us; 52us; 51us; 19us; 0us; 49152us; 0us; 16385us; 4us; 32768us; 1us; 4us; 2us; 10us; 4us; 52us; 51us; 19us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 3us; 32768us; 37us; 29us; 38us; 21us; 41us; 23us; 7us; 16457us; 18us; 118us; 20us; 164us; 37us; 29us; 38us; 21us; 39us; 116us; 40us; 168us; 41us; 23us; 7us; 32768us; 20us; 40us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 0us; 16400us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 2us; 32768us; 2us; 25us; 39us; 26us; 0us; 16401us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 15us; 32768us; 2us; 28us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 0us; 16402us; 1us; 32768us; 18us; 30us; 2us; 32768us; 17us; 31us; 57us; 35us; 1us; 32768us; 10us; 32us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 1us; 32768us; 2us; 34us; 0us; 16403us; 1us; 32768us; 17us; 36us; 1us; 32768us; 10us; 37us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 1us; 32768us; 2us; 39us; 0us; 16404us; 3us; 32768us; 19us; 46us; 49us; 62us; 51us; 66us; 1us; 32768us; 19us; 42us; 2us; 32768us; 12us; 101us; 16us; 43us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 1us; 32768us; 12us; 101us; 0us; 16405us; 2us; 32768us; 12us; 101us; 16us; 47us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 1us; 32768us; 12us; 101us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 1us; 32768us; 51us; 53us; 1us; 32768us; 38us; 54us; 1us; 32768us; 20us; 55us; 2us; 32768us; 49us; 62us; 51us; 66us; 1us; 32768us; 19us; 57us; 1us; 32768us; 16us; 58us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 1us; 32768us; 12us; 101us; 0us; 16409us; 1us; 16410us; 43us; 63us; 0us; 16411us; 1us; 32768us; 51us; 66us; 0us; 16412us; 0us; 16413us; 1us; 32768us; 41us; 67us; 8us; 32768us; 18us; 69us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 0us; 16414us; 1us; 32768us; 17us; 70us; 8us; 32768us; 10us; 71us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 7us; 32768us; 44us; 18us; 45us; 17us; 46us; 15us; 47us; 16us; 48us; 13us; 49us; 12us; 50us; 14us; 0us; 16415us; 0us; 16416us; 21us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 9us; 98us; 11us; 96us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 20us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 11us; 99us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 20us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 11us; 103us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 15us; 32768us; 2us; 88us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 0us; 16427us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 31us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 155us; 36us; 157us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 0us; 16429us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 15us; 32768us; 14us; 94us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 1us; 32768us; 2us; 95us; 19us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 1us; 32768us; 2us; 97us; 0us; 16430us; 19us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 1us; 32768us; 2us; 100us; 0us; 16431us; 1us; 32768us; 2us; 102us; 20us; 32768us; 2us; 11us; 4us; 52us; 5us; 109us; 6us; 107us; 7us; 111us; 11us; 105us; 12us; 101us; 13us; 89us; 15us; 92us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 20us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 1us; 32768us; 2us; 104us; 0us; 16433us; 1us; 32768us; 2us; 106us; 0us; 16434us; 1us; 32768us; 2us; 108us; 0us; 16435us; 1us; 32768us; 2us; 110us; 0us; 16436us; 12us; 32768us; 2us; 114us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 15us; 32768us; 2us; 113us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 0us; 16437us; 0us; 16438us; 4us; 16457us; 18us; 118us; 20us; 164us; 39us; 116us; 40us; 168us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 14us; 16439us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 15us; 32768us; 17us; 120us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 1us; 16458us; 39us; 121us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 14us; 16440us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 9us; 16441us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 9us; 16442us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 9us; 16443us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 5us; 16444us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 5us; 16445us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 5us; 16446us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 5us; 16447us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 12us; 16448us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 12us; 16449us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 3us; 16450us; 32us; 160us; 33us; 158us; 34us; 159us; 3us; 16450us; 32us; 160us; 33us; 158us; 34us; 159us; 3us; 16451us; 32us; 160us; 33us; 158us; 34us; 159us; 3us; 16451us; 32us; 160us; 33us; 158us; 34us; 159us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 15us; 32768us; 19us; 163us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 5us; 16463us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 3us; 16464us; 32us; 160us; 33us; 158us; 34us; 159us; 3us; 16465us; 32us; 160us; 33us; 158us; 34us; 159us; 14us; 16466us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 14us; 16467us; 23us; 152us; 24us; 153us; 25us; 151us; 26us; 150us; 27us; 149us; 28us; 148us; 29us; 146us; 30us; 147us; 31us; 145us; 32us; 160us; 33us; 158us; 34us; 159us; 35us; 154us; 36us; 156us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 0us; 16455us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 0us; 16456us; 12us; 32768us; 19us; 167us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 2us; 32768us; 19us; 166us; 43us; 174us; 0us; 16459us; 0us; 16460us; 1us; 32768us; 3us; 169us; 0us; 16461us; 0us; 16462us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 11us; 32768us; 20us; 162us; 22us; 171us; 35us; 173us; 36us; 172us; 51us; 115us; 52us; 177us; 53us; 180us; 54us; 179us; 55us; 176us; 56us; 178us; 57us; 175us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 0us; 16473us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 6us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 30us; 38us; 46us; 47us; 55us; 58us; 59us; 71us; 87us; 88us; 90us; 93us; 95us; 103us; 105us; 106us; 108us; 110us; 118us; 120us; 121us; 125us; 127us; 130us; 138us; 140us; 141us; 144us; 152us; 154us; 155us; 156us; 157us; 159us; 161us; 163us; 166us; 168us; 170us; 178us; 180us; 181us; 183us; 184us; 186us; 187us; 188us; 190us; 199us; 200us; 202us; 211us; 219us; 220us; 221us; 243us; 264us; 285us; 286us; 287us; 288us; 289us; 290us; 291us; 292us; 293us; 294us; 295us; 311us; 312us; 324us; 356us; 357us; 369us; 385us; 387us; 407us; 409us; 410us; 430us; 432us; 433us; 435us; 456us; 458us; 459us; 461us; 462us; 464us; 465us; 467us; 468us; 481us; 497us; 498us; 499us; 504us; 516us; 531us; 543us; 559us; 561us; 573us; 588us; 598us; 608us; 618us; 624us; 630us; 636us; 642us; 655us; 668us; 672us; 676us; 680us; 684us; 685us; 686us; 687us; 703us; 709us; 713us; 717us; 732us; 747us; 759us; 771us; 783us; 795us; 807us; 819us; 831us; 843us; 855us; 867us; 879us; 891us; 903us; 915us; 927us; 939us; 940us; 952us; 953us; 966us; 969us; 970us; 971us; 973us; 974us; 975us; 987us; 999us; 1011us; 1023us; 1024us; 1025us; 1026us; 1027us; 1028us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 4us; 6us; 7us; 8us; 8us; 7us; 6us; 5us; 9us; 1us; 1us; 3us; 1us; 3us; 6us; 5us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 7us; 9us; 1us; 5us; 4us; 2us; 2us; 3us; 2us; 3us; 6us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 1us; 4us; 4us; 3us; 3us; 1us; 2us; 2us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 16us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; 25us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 65535us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 16406us; 16407us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 16411us; 65535us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 16416us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 65535us; 16427us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 16431us; 65535us; 65535us; 65535us; 16433us; 65535us; 16434us; 65535us; 16435us; 65535us; 16436us; 65535us; 65535us; 16437us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16455us; 65535us; 16456us; 65535us; 65535us; 16459us; 16460us; 65535us; 16461us; 16462us; 65535us; 65535us; 65535us; 65535us; 16468us; 16469us; 16470us; 16471us; 16472us; 16473us; |]
let _fsyacc_reductions ()  =    [| 
# 521 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 530 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "parser.y"
                                      _1 
                   )
# 118 "parser.y"
                 : Program));
# 541 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "parser.y"
                                                        _1 
                   )
# 120 "parser.y"
                 : Program));
# 552 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "parser.y"
                                                     _1 @ [_2] 
                   )
# 122 "parser.y"
                 : Declaration list));
# 564 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "parser.y"
                                                     [_1] 
                   )
# 123 "parser.y"
                 : Declaration list));
# 575 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : VariableDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "parser.y"
                                                     Ast.VariableDecl _1 
                   )
# 125 "parser.y"
                 : Declaration));
# 586 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ConstantDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "parser.y"
                                                     Ast.ConstantDecl _1 
                   )
# 126 "parser.y"
                 : Declaration));
# 597 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ProcedureDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "parser.y"
                                                     Ast.ProcedureDecl _1 
                   )
# 127 "parser.y"
                 : Declaration));
# 608 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "parser.y"
                                                     Ast.DeclNop 
                   )
# 128 "parser.y"
                 : Declaration));
# 618 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "parser.y"
                                            Ast.Void 
                   )
# 130 "parser.y"
                 : TypeSpec));
# 628 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "parser.y"
                                       Ast.Int 
                   )
# 131 "parser.y"
                 : TypeSpec));
# 638 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "parser.y"
                                       Ast.Float 
                   )
# 132 "parser.y"
                 : TypeSpec));
# 648 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "parser.y"
                                       Ast.Char 
                   )
# 133 "parser.y"
                 : TypeSpec));
# 658 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "parser.y"
                                       Ast.Byte 
                   )
# 134 "parser.y"
                 : TypeSpec));
# 668 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "parser.y"
                                       Ast.String 
                   )
# 135 "parser.y"
                 : TypeSpec));
# 678 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "parser.y"
                                       Ast.Text 
                   )
# 136 "parser.y"
                 : TypeSpec));
# 688 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "parser.y"
                                                                    Ast.ScalarConstantDecl(_1, _3) 
                   )
# 139 "parser.y"
                 : ConstantDecl));
# 700 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "parser.y"
                           Ast.ScalarVariableDecl(_1, _3, None) 
                   )
# 144 "parser.y"
                 : VariableDecl));
# 712 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "parser.y"
                           Ast.ScalarVariableDecl(_1, _3, Some(_5)) 
                   )
# 147 "parser.y"
                 : VariableDecl));
# 725 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "parser.y"
                           Ast.ArrayVariableDecl(_1, _6) 
                   )
# 150 "parser.y"
                 : VariableDecl));
# 737 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "parser.y"
                           Ast.FixedArrayVariableDecl(_1, _4, _7) 
                   )
# 153 "parser.y"
                 : VariableDecl));
# 750 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "parser.y"
                           Ast.InternalProcedureDecl(_1, _4, _7, _8)
                   )
# 157 "parser.y"
                 : ProcedureDecl));
# 764 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "parser.y"
                           Ast.InternalProcedureDecl(_1, [], _6, _7)
                   )
# 160 "parser.y"
                 : ProcedureDecl));
# 777 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "parser.y"
                           Ast.InternalProcedureDecl(_1, _4, Ast.Void, _6)
                   )
# 163 "parser.y"
                 : ProcedureDecl));
# 790 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "parser.y"
                           Ast.InternalProcedureDecl(_1, [], Ast.Void, _5)
                   )
# 166 "parser.y"
                 : ProcedureDecl));
# 802 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "parser.y"
                           Ast.PublicProcedureDecl(_2, _5, _8, _9)
                   )
# 170 "parser.y"
                 : ProcedureDecl));
# 816 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "parser.y"
                                                   _1 
                   )
# 172 "parser.y"
                 : Parameters));
# 827 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "parser.y"
                                     [] 
                   )
# 174 "parser.y"
                 : Parameters));
# 837 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : VariableDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "parser.y"
                                                                      _1 @ [_3] 
                   )
# 176 "parser.y"
                 : Parameters));
# 849 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : VariableDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "parser.y"
                                       [_1] 
                   )
# 177 "parser.y"
                 : Parameters));
# 860 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "parser.y"
                           Ast.ScalarVariableDecl(_1, _3, None) 
                   )
# 180 "parser.y"
                 : VariableDecl));
# 872 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "parser.y"
                           Ast.ArrayVariableDecl(_1, _6) 
                   )
# 183 "parser.y"
                 : VariableDecl));
# 884 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "parser.y"
                           Ast.ArrayVariableDecl(_1, _5) 
                   )
# 186 "parser.y"
                 : VariableDecl));
# 896 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "parser.y"
                                                  _1 @ [_2] 
                   )
# 188 "parser.y"
                 : Statement list));
# 908 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "parser.y"
                                                  [_1] 
                   )
# 189 "parser.y"
                 : Statement list));
# 919 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "parser.y"
                                                Ast.Declaration _1 
                   )
# 191 "parser.y"
                 : Statement));
# 930 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "parser.y"
                                                Ast.SExpression _1 
                   )
# 192 "parser.y"
                 : Statement));
# 941 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "parser.y"
                                                Ast.CompoundStatement _1 
                   )
# 193 "parser.y"
                 : Statement));
# 952 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IfStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "parser.y"
                                                Ast.IfStatement _1 
                   )
# 194 "parser.y"
                 : Statement));
# 963 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : WhileStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "parser.y"
                                                Ast.WhileStatement _1 
                   )
# 195 "parser.y"
                 : Statement));
# 974 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "parser.y"
                                                Ast.ReturnStatement _1 
                   )
# 196 "parser.y"
                 : Statement));
# 985 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : unit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "parser.y"
                                                Ast.BreakStatement 
                   )
# 197 "parser.y"
                 : Statement));
# 996 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : unit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "parser.y"
                                                Ast.ContinueStatement 
                   )
# 198 "parser.y"
                 : Statement));
# 1007 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "parser.y"
                                                  Ast.Expression _1 
                   )
# 200 "parser.y"
                 : SExpression));
# 1018 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "parser.y"
                                                 Ast.Nop 
                   )
# 201 "parser.y"
                 : SExpression));
# 1028 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "parser.y"
                                                           (_2, _3) 
                   )
# 203 "parser.y"
                 : WhileStatement));
# 1040 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "parser.y"
                           (_2, _5, None) 
                   )
# 206 "parser.y"
                 : IfStatement));
# 1052 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "parser.y"
                           (_2, _5, Some(_7)) 
                   )
# 208 "parser.y"
                 : IfStatement));
# 1065 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "parser.y"
                                       _1 
                   )
# 210 "parser.y"
                 : 'condition));
# 1076 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "parser.y"
                                                                        _3 
                   )
# 218 "parser.y"
                 : CompoundStatement));
# 1087 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "parser.y"
                                                     [] 
                   )
# 219 "parser.y"
                 : CompoundStatement));
# 1097 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "parser.y"
                                                
                   )
# 221 "parser.y"
                 : unit));
# 1107 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "parser.y"
                                                      
                   )
# 223 "parser.y"
                 : unit));
# 1117 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "parser.y"
                                                             Some(_2) 
                   )
# 226 "parser.y"
                 : Expression option));
# 1128 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "parser.y"
                                                 None 
                   )
# 227 "parser.y"
                 : Expression option));
# 1138 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "parser.y"
                           Ast.ScalarAssignExpression({ Identifier = _1 }, _3) 
                   )
# 230 "parser.y"
                 : Expression));
# 1150 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "parser.y"
                           Ast.ArrayAssignExpression({ Identifier = _1 }, _3, _6) 
                   )
# 233 "parser.y"
                 : Expression));
# 1163 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Eq, _3) 
                   )
# 235 "parser.y"
                 : Expression));
# 1175 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Eq, _3) 
                   )
# 236 "parser.y"
                 : Expression));
# 1187 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.NotEq, _3) 
                   )
# 237 "parser.y"
                 : Expression));
# 1199 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.LtEq, _3) 
                   )
# 238 "parser.y"
                 : Expression));
# 1211 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Lt, _3) 
                   )
# 239 "parser.y"
                 : Expression));
# 1223 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.GtEq, _3) 
                   )
# 240 "parser.y"
                 : Expression));
# 1235 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Gt, _3) 
                   )
# 241 "parser.y"
                 : Expression));
# 1247 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.CondAnd, _3) 
                   )
# 242 "parser.y"
                 : Expression));
# 1259 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.CondOr, _3) 
                   )
# 243 "parser.y"
                 : Expression));
# 1271 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Add, _3) 
                   )
# 245 "parser.y"
                 : Expression));
# 1283 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Sub, _3) 
                   )
# 246 "parser.y"
                 : Expression));
# 1295 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Mul, _3) 
                   )
# 247 "parser.y"
                 : Expression));
# 1307 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Div, _3) 
                   )
# 248 "parser.y"
                 : Expression));
# 1319 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "parser.y"
                                                        Ast.BinaryExpression(_1, Ast.Mod, _3) 
                   )
# 249 "parser.y"
                 : Expression));
# 1331 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "parser.y"
                                               _1 
                   )
# 251 "parser.y"
                 : Expression));
# 1342 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "parser.y"
                                                        _2 
                   )
# 253 "parser.y"
                 : Expression));
# 1353 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "parser.y"
                           Ast.IdentifierExpression({ Identifier = _1 }) 
                   )
# 256 "parser.y"
                 : Expression));
# 1364 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "parser.y"
                           Ast.ArrayIdentifierExpression({ Identifier = _1 }, _3) 
                   )
# 258 "parser.y"
                 : Expression));
# 1376 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "parser.y"
                           Ast.ProcedureCallExpression({ Identifier = _1 }, _3)
                   )
# 262 "parser.y"
                 : Expression));
# 1388 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "parser.y"
                           Ast.ProcedureCallExpression({ Identifier = _1 }, [])
                   )
# 265 "parser.y"
                 : Expression));
# 1399 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "parser.y"
                           Ast.ArrayCountExpression({ Identifier = _1} )
                   )
# 267 "parser.y"
                 : Expression));
# 1410 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "parser.y"
                                          Ast.LiteralExpression _1 
                   )
# 270 "parser.y"
                 : Expression));
# 1421 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "parser.y"
                                                Ast.UnaryExpression(Ast.LogicalNot, _2) 
                   )
# 272 "parser.y"
                 : Expression));
# 1432 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "parser.y"
                                                Ast.UnaryExpression(Ast.Negate, _2) 
                   )
# 273 "parser.y"
                 : Expression));
# 1443 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "parser.y"
                                                Ast.UnaryExpression(Ast.Identity, _2) 
                   )
# 274 "parser.y"
                 : Expression));
# 1454 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Arguments)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "parser.y"
                                                       _1 @ [_3] 
                   )
# 276 "parser.y"
                 : Arguments));
# 1466 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "parser.y"
                                                       [_1] 
                   )
# 277 "parser.y"
                 : Arguments));
# 1477 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "parser.y"
                                              Ast.IntLiteral(int _1) 
                   )
# 279 "parser.y"
                 : Literal));
# 1488 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "parser.y"
                                              Ast.FloatLiteral(float32 _1) 
                   )
# 280 "parser.y"
                 : Literal));
# 1499 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "parser.y"
                                              Ast.ByteLiteral(byte _1) 
                   )
# 281 "parser.y"
                 : Literal));
# 1510 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "parser.y"
                                              Ast.CharLiteral(char _1) 
                   )
# 282 "parser.y"
                 : Literal));
# 1521 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "parser.y"
                                              Ast.StringLiteral _1 
                   )
# 283 "parser.y"
                 : Literal));
# 1532 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "parser.y"
                                              Ast.TextLiteral _1 
                   )
# 284 "parser.y"
                 : Literal));
|]
# 1544 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 61;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
