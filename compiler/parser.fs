// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.y"

open Ast

let mutable syntax_error = false

let flag_static_fixed = ArrayFlags.STATIC ||| ArrayFlags.FIXED
let flag_static_const = ScalarFlags.STATIC ||| ScalarFlags.CONSTANT

let idref id =
    { Identifier = id }

let yyerror (msg: string) =
    syntax_error <- true
    printfn "syntax error: %s" msg

# 22 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | Empty
  | EOF
  | EOL
  | KW_COUNT
  | KW_EXPORT
  | KW_CONTINUE
  | KW_BREAK
  | KW_RETURN
  | KW_ELSIF
  | KW_ELSE
  | KW_OF
  | KW_END
  | KW_DO
  | KW_WHILE
  | KW_THEN
  | KW_IF
  | RARROW
  | RBRACKET
  | LBRACKET
  | RPAREN
  | LPAREN
  | AMP
  | KW_NOT
  | KW_AND
  | KW_OR
  | GREATER
  | GREATER_EQUALS
  | LESS
  | LESS_EQUALS
  | KW_IS
  | LESS_GREATER
  | DOUBLE_EQUALS
  | PERCENT
  | ASTERISK
  | FSLASH
  | PLUS
  | MINUS
  | COLON_EQUALS
  | DOUBLE_COLON
  | SINGLE_EQUALS
  | HASH
  | DOT
  | COLON
  | SEMI_COLON
  | COMMA
  | KW_TEXT
  | KW_STRING
  | KW_CHAR
  | KW_BYTE
  | KW_INT
  | KW_VOID
  | KW_FLOAT
  | IDENT of (string)
  | BYTE_LITERAL of (byte)
  | STRING_LITERAL of (string)
  | FLOAT_LITERAL of (float32)
  | INT_LITERAL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_Empty
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_KW_COUNT
    | TOKEN_KW_EXPORT
    | TOKEN_KW_CONTINUE
    | TOKEN_KW_BREAK
    | TOKEN_KW_RETURN
    | TOKEN_KW_ELSIF
    | TOKEN_KW_ELSE
    | TOKEN_KW_OF
    | TOKEN_KW_END
    | TOKEN_KW_DO
    | TOKEN_KW_WHILE
    | TOKEN_KW_THEN
    | TOKEN_KW_IF
    | TOKEN_RARROW
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AMP
    | TOKEN_KW_NOT
    | TOKEN_KW_AND
    | TOKEN_KW_OR
    | TOKEN_GREATER
    | TOKEN_GREATER_EQUALS
    | TOKEN_LESS
    | TOKEN_LESS_EQUALS
    | TOKEN_KW_IS
    | TOKEN_LESS_GREATER
    | TOKEN_DOUBLE_EQUALS
    | TOKEN_PERCENT
    | TOKEN_ASTERISK
    | TOKEN_FSLASH
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_COLON_EQUALS
    | TOKEN_DOUBLE_COLON
    | TOKEN_SINGLE_EQUALS
    | TOKEN_HASH
    | TOKEN_DOT
    | TOKEN_COLON
    | TOKEN_SEMI_COLON
    | TOKEN_COMMA
    | TOKEN_KW_TEXT
    | TOKEN_KW_STRING
    | TOKEN_KW_CHAR
    | TOKEN_KW_BYTE
    | TOKEN_KW_INT
    | TOKEN_KW_VOID
    | TOKEN_KW_FLOAT
    | TOKEN_IDENT
    | TOKEN_BYTE_LITERAL
    | TOKEN_STRING_LITERAL
    | TOKEN_FLOAT_LITERAL
    | TOKEN_INT_LITERAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_program
    | NONTERM_decl_list
    | NONTERM_decl
    | NONTERM_type_spec
    | NONTERM_fixed_decl
    | NONTERM_variable_decl
    | NONTERM_fixed_scalar_decl
    | NONTERM_fixed_array_decl
    | NONTERM_scalar_decl
    | NONTERM_array_decl
    | NONTERM_procedure_decl
    | NONTERM_parameters
    | NONTERM_parameter_list
    | NONTERM_parameter
    | NONTERM_stmt_list
    | NONTERM_stmt
    | NONTERM_sexpr
    | NONTERM_while_stmt
    | NONTERM_if_stmt
    | NONTERM_cond_clause_s
    | NONTERM_cond_clause
    | NONTERM_cond_part
    | NONTERM_condition
    | NONTERM_else_opt
    | NONTERM_compound_stmt
    | NONTERM_break_stmt
    | NONTERM_continue_stmt
    | NONTERM_return_stmt
    | NONTERM_expr_list
    | NONTERM_aggregate
    | NONTERM_expr
    | NONTERM_logical
    | NONTERM_relation
    | NONTERM_relational
    | NONTERM_equation
    | NONTERM_unary
    | NONTERM_combinatory
    | NONTERM_term
    | NONTERM_sequential
    | NONTERM_factor
    | NONTERM_primary
    | NONTERM_qualified
    | NONTERM_paren_primary
    | NONTERM_arguments
    | NONTERM_literal

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | Empty  -> 0 
  | EOF  -> 1 
  | EOL  -> 2 
  | KW_COUNT  -> 3 
  | KW_EXPORT  -> 4 
  | KW_CONTINUE  -> 5 
  | KW_BREAK  -> 6 
  | KW_RETURN  -> 7 
  | KW_ELSIF  -> 8 
  | KW_ELSE  -> 9 
  | KW_OF  -> 10 
  | KW_END  -> 11 
  | KW_DO  -> 12 
  | KW_WHILE  -> 13 
  | KW_THEN  -> 14 
  | KW_IF  -> 15 
  | RARROW  -> 16 
  | RBRACKET  -> 17 
  | LBRACKET  -> 18 
  | RPAREN  -> 19 
  | LPAREN  -> 20 
  | AMP  -> 21 
  | KW_NOT  -> 22 
  | KW_AND  -> 23 
  | KW_OR  -> 24 
  | GREATER  -> 25 
  | GREATER_EQUALS  -> 26 
  | LESS  -> 27 
  | LESS_EQUALS  -> 28 
  | KW_IS  -> 29 
  | LESS_GREATER  -> 30 
  | DOUBLE_EQUALS  -> 31 
  | PERCENT  -> 32 
  | ASTERISK  -> 33 
  | FSLASH  -> 34 
  | PLUS  -> 35 
  | MINUS  -> 36 
  | COLON_EQUALS  -> 37 
  | DOUBLE_COLON  -> 38 
  | SINGLE_EQUALS  -> 39 
  | HASH  -> 40 
  | DOT  -> 41 
  | COLON  -> 42 
  | SEMI_COLON  -> 43 
  | COMMA  -> 44 
  | KW_TEXT  -> 45 
  | KW_STRING  -> 46 
  | KW_CHAR  -> 47 
  | KW_BYTE  -> 48 
  | KW_INT  -> 49 
  | KW_VOID  -> 50 
  | KW_FLOAT  -> 51 
  | IDENT _ -> 52 
  | BYTE_LITERAL _ -> 53 
  | STRING_LITERAL _ -> 54 
  | FLOAT_LITERAL _ -> 55 
  | INT_LITERAL _ -> 56 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_Empty 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_EOL 
  | 3 -> TOKEN_KW_COUNT 
  | 4 -> TOKEN_KW_EXPORT 
  | 5 -> TOKEN_KW_CONTINUE 
  | 6 -> TOKEN_KW_BREAK 
  | 7 -> TOKEN_KW_RETURN 
  | 8 -> TOKEN_KW_ELSIF 
  | 9 -> TOKEN_KW_ELSE 
  | 10 -> TOKEN_KW_OF 
  | 11 -> TOKEN_KW_END 
  | 12 -> TOKEN_KW_DO 
  | 13 -> TOKEN_KW_WHILE 
  | 14 -> TOKEN_KW_THEN 
  | 15 -> TOKEN_KW_IF 
  | 16 -> TOKEN_RARROW 
  | 17 -> TOKEN_RBRACKET 
  | 18 -> TOKEN_LBRACKET 
  | 19 -> TOKEN_RPAREN 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_AMP 
  | 22 -> TOKEN_KW_NOT 
  | 23 -> TOKEN_KW_AND 
  | 24 -> TOKEN_KW_OR 
  | 25 -> TOKEN_GREATER 
  | 26 -> TOKEN_GREATER_EQUALS 
  | 27 -> TOKEN_LESS 
  | 28 -> TOKEN_LESS_EQUALS 
  | 29 -> TOKEN_KW_IS 
  | 30 -> TOKEN_LESS_GREATER 
  | 31 -> TOKEN_DOUBLE_EQUALS 
  | 32 -> TOKEN_PERCENT 
  | 33 -> TOKEN_ASTERISK 
  | 34 -> TOKEN_FSLASH 
  | 35 -> TOKEN_PLUS 
  | 36 -> TOKEN_MINUS 
  | 37 -> TOKEN_COLON_EQUALS 
  | 38 -> TOKEN_DOUBLE_COLON 
  | 39 -> TOKEN_SINGLE_EQUALS 
  | 40 -> TOKEN_HASH 
  | 41 -> TOKEN_DOT 
  | 42 -> TOKEN_COLON 
  | 43 -> TOKEN_SEMI_COLON 
  | 44 -> TOKEN_COMMA 
  | 45 -> TOKEN_KW_TEXT 
  | 46 -> TOKEN_KW_STRING 
  | 47 -> TOKEN_KW_CHAR 
  | 48 -> TOKEN_KW_BYTE 
  | 49 -> TOKEN_KW_INT 
  | 50 -> TOKEN_KW_VOID 
  | 51 -> TOKEN_KW_FLOAT 
  | 52 -> TOKEN_IDENT 
  | 53 -> TOKEN_BYTE_LITERAL 
  | 54 -> TOKEN_STRING_LITERAL 
  | 55 -> TOKEN_FLOAT_LITERAL 
  | 56 -> TOKEN_INT_LITERAL 
  | 59 -> TOKEN_end_of_input
  | 57 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_decl_list 
    | 4 -> NONTERM_decl_list 
    | 5 -> NONTERM_decl 
    | 6 -> NONTERM_decl 
    | 7 -> NONTERM_type_spec 
    | 8 -> NONTERM_type_spec 
    | 9 -> NONTERM_type_spec 
    | 10 -> NONTERM_type_spec 
    | 11 -> NONTERM_type_spec 
    | 12 -> NONTERM_type_spec 
    | 13 -> NONTERM_type_spec 
    | 14 -> NONTERM_fixed_decl 
    | 15 -> NONTERM_fixed_decl 
    | 16 -> NONTERM_variable_decl 
    | 17 -> NONTERM_variable_decl 
    | 18 -> NONTERM_variable_decl 
    | 19 -> NONTERM_variable_decl 
    | 20 -> NONTERM_fixed_scalar_decl 
    | 21 -> NONTERM_fixed_array_decl 
    | 22 -> NONTERM_fixed_array_decl 
    | 23 -> NONTERM_fixed_array_decl 
    | 24 -> NONTERM_fixed_array_decl 
    | 25 -> NONTERM_scalar_decl 
    | 26 -> NONTERM_scalar_decl 
    | 27 -> NONTERM_scalar_decl 
    | 28 -> NONTERM_array_decl 
    | 29 -> NONTERM_array_decl 
    | 30 -> NONTERM_array_decl 
    | 31 -> NONTERM_array_decl 
    | 32 -> NONTERM_array_decl 
    | 33 -> NONTERM_procedure_decl 
    | 34 -> NONTERM_procedure_decl 
    | 35 -> NONTERM_procedure_decl 
    | 36 -> NONTERM_procedure_decl 
    | 37 -> NONTERM_procedure_decl 
    | 38 -> NONTERM_parameters 
    | 39 -> NONTERM_parameters 
    | 40 -> NONTERM_parameter_list 
    | 41 -> NONTERM_parameter_list 
    | 42 -> NONTERM_parameter 
    | 43 -> NONTERM_parameter 
    | 44 -> NONTERM_parameter 
    | 45 -> NONTERM_stmt_list 
    | 46 -> NONTERM_stmt_list 
    | 47 -> NONTERM_stmt 
    | 48 -> NONTERM_stmt 
    | 49 -> NONTERM_stmt 
    | 50 -> NONTERM_stmt 
    | 51 -> NONTERM_stmt 
    | 52 -> NONTERM_stmt 
    | 53 -> NONTERM_stmt 
    | 54 -> NONTERM_stmt 
    | 55 -> NONTERM_sexpr 
    | 56 -> NONTERM_while_stmt 
    | 57 -> NONTERM_if_stmt 
    | 58 -> NONTERM_if_stmt 
    | 59 -> NONTERM_cond_clause_s 
    | 60 -> NONTERM_cond_clause_s 
    | 61 -> NONTERM_cond_clause 
    | 62 -> NONTERM_cond_part 
    | 63 -> NONTERM_condition 
    | 64 -> NONTERM_else_opt 
    | 65 -> NONTERM_compound_stmt 
    | 66 -> NONTERM_compound_stmt 
    | 67 -> NONTERM_break_stmt 
    | 68 -> NONTERM_continue_stmt 
    | 69 -> NONTERM_return_stmt 
    | 70 -> NONTERM_return_stmt 
    | 71 -> NONTERM_expr_list 
    | 72 -> NONTERM_expr_list 
    | 73 -> NONTERM_aggregate 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_logical 
    | 79 -> NONTERM_logical 
    | 80 -> NONTERM_relation 
    | 81 -> NONTERM_relation 
    | 82 -> NONTERM_relation 
    | 83 -> NONTERM_relational 
    | 84 -> NONTERM_relational 
    | 85 -> NONTERM_relational 
    | 86 -> NONTERM_relational 
    | 87 -> NONTERM_relational 
    | 88 -> NONTERM_relational 
    | 89 -> NONTERM_equation 
    | 90 -> NONTERM_equation 
    | 91 -> NONTERM_unary 
    | 92 -> NONTERM_unary 
    | 93 -> NONTERM_combinatory 
    | 94 -> NONTERM_combinatory 
    | 95 -> NONTERM_term 
    | 96 -> NONTERM_term 
    | 97 -> NONTERM_sequential 
    | 98 -> NONTERM_sequential 
    | 99 -> NONTERM_sequential 
    | 100 -> NONTERM_factor 
    | 101 -> NONTERM_factor 
    | 102 -> NONTERM_factor 
    | 103 -> NONTERM_primary 
    | 104 -> NONTERM_primary 
    | 105 -> NONTERM_primary 
    | 106 -> NONTERM_primary 
    | 107 -> NONTERM_qualified 
    | 108 -> NONTERM_qualified 
    | 109 -> NONTERM_qualified 
    | 110 -> NONTERM_qualified 
    | 111 -> NONTERM_paren_primary 
    | 112 -> NONTERM_arguments 
    | 113 -> NONTERM_arguments 
    | 114 -> NONTERM_literal 
    | 115 -> NONTERM_literal 
    | 116 -> NONTERM_literal 
    | 117 -> NONTERM_literal 
    | 118 -> NONTERM_literal 
    | 119 -> NONTERM_literal 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 59 
let _fsyacc_tagOfErrorTerminal = 57

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | Empty  -> "Empty" 
  | EOF  -> "EOF" 
  | EOL  -> "EOL" 
  | KW_COUNT  -> "KW_COUNT" 
  | KW_EXPORT  -> "KW_EXPORT" 
  | KW_CONTINUE  -> "KW_CONTINUE" 
  | KW_BREAK  -> "KW_BREAK" 
  | KW_RETURN  -> "KW_RETURN" 
  | KW_ELSIF  -> "KW_ELSIF" 
  | KW_ELSE  -> "KW_ELSE" 
  | KW_OF  -> "KW_OF" 
  | KW_END  -> "KW_END" 
  | KW_DO  -> "KW_DO" 
  | KW_WHILE  -> "KW_WHILE" 
  | KW_THEN  -> "KW_THEN" 
  | KW_IF  -> "KW_IF" 
  | RARROW  -> "RARROW" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AMP  -> "AMP" 
  | KW_NOT  -> "KW_NOT" 
  | KW_AND  -> "KW_AND" 
  | KW_OR  -> "KW_OR" 
  | GREATER  -> "GREATER" 
  | GREATER_EQUALS  -> "GREATER_EQUALS" 
  | LESS  -> "LESS" 
  | LESS_EQUALS  -> "LESS_EQUALS" 
  | KW_IS  -> "KW_IS" 
  | LESS_GREATER  -> "LESS_GREATER" 
  | DOUBLE_EQUALS  -> "DOUBLE_EQUALS" 
  | PERCENT  -> "PERCENT" 
  | ASTERISK  -> "ASTERISK" 
  | FSLASH  -> "FSLASH" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | COLON_EQUALS  -> "COLON_EQUALS" 
  | DOUBLE_COLON  -> "DOUBLE_COLON" 
  | SINGLE_EQUALS  -> "SINGLE_EQUALS" 
  | HASH  -> "HASH" 
  | DOT  -> "DOT" 
  | COLON  -> "COLON" 
  | SEMI_COLON  -> "SEMI_COLON" 
  | COMMA  -> "COMMA" 
  | KW_TEXT  -> "KW_TEXT" 
  | KW_STRING  -> "KW_STRING" 
  | KW_CHAR  -> "KW_CHAR" 
  | KW_BYTE  -> "KW_BYTE" 
  | KW_INT  -> "KW_INT" 
  | KW_VOID  -> "KW_VOID" 
  | KW_FLOAT  -> "KW_FLOAT" 
  | IDENT _ -> "IDENT" 
  | BYTE_LITERAL _ -> "BYTE_LITERAL" 
  | STRING_LITERAL _ -> "STRING_LITERAL" 
  | FLOAT_LITERAL _ -> "FLOAT_LITERAL" 
  | INT_LITERAL _ -> "INT_LITERAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | Empty  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | EOL  -> (null : System.Object) 
  | KW_COUNT  -> (null : System.Object) 
  | KW_EXPORT  -> (null : System.Object) 
  | KW_CONTINUE  -> (null : System.Object) 
  | KW_BREAK  -> (null : System.Object) 
  | KW_RETURN  -> (null : System.Object) 
  | KW_ELSIF  -> (null : System.Object) 
  | KW_ELSE  -> (null : System.Object) 
  | KW_OF  -> (null : System.Object) 
  | KW_END  -> (null : System.Object) 
  | KW_DO  -> (null : System.Object) 
  | KW_WHILE  -> (null : System.Object) 
  | KW_THEN  -> (null : System.Object) 
  | KW_IF  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | KW_NOT  -> (null : System.Object) 
  | KW_AND  -> (null : System.Object) 
  | KW_OR  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | GREATER_EQUALS  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LESS_EQUALS  -> (null : System.Object) 
  | KW_IS  -> (null : System.Object) 
  | LESS_GREATER  -> (null : System.Object) 
  | DOUBLE_EQUALS  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | FSLASH  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | COLON_EQUALS  -> (null : System.Object) 
  | DOUBLE_COLON  -> (null : System.Object) 
  | SINGLE_EQUALS  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMI_COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | KW_TEXT  -> (null : System.Object) 
  | KW_STRING  -> (null : System.Object) 
  | KW_CHAR  -> (null : System.Object) 
  | KW_BYTE  -> (null : System.Object) 
  | KW_INT  -> (null : System.Object) 
  | KW_VOID  -> (null : System.Object) 
  | KW_FLOAT  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BYTE_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 3us; 9us; 65535us; 0us; 6us; 3us; 5us; 106us; 111us; 107us; 111us; 108us; 111us; 122us; 111us; 134us; 111us; 138us; 111us; 140us; 111us; 11us; 65535us; 30us; 31us; 36us; 37us; 44us; 45us; 55us; 56us; 60us; 61us; 74us; 75us; 78us; 79us; 89us; 90us; 99us; 100us; 102us; 105us; 103us; 104us; 9us; 65535us; 0us; 20us; 3us; 20us; 106us; 20us; 107us; 20us; 108us; 20us; 122us; 20us; 134us; 20us; 138us; 20us; 140us; 20us; 9us; 65535us; 0us; 7us; 3us; 7us; 106us; 7us; 107us; 7us; 108us; 7us; 122us; 7us; 134us; 7us; 138us; 7us; 140us; 7us; 9us; 65535us; 0us; 16us; 3us; 16us; 106us; 16us; 107us; 16us; 108us; 16us; 122us; 16us; 134us; 16us; 138us; 16us; 140us; 16us; 9us; 65535us; 0us; 17us; 3us; 17us; 106us; 17us; 107us; 17us; 108us; 17us; 122us; 17us; 134us; 17us; 138us; 17us; 140us; 17us; 9us; 65535us; 0us; 18us; 3us; 18us; 106us; 18us; 107us; 18us; 108us; 18us; 122us; 18us; 134us; 18us; 138us; 18us; 140us; 18us; 9us; 65535us; 0us; 19us; 3us; 19us; 106us; 19us; 107us; 19us; 108us; 19us; 122us; 19us; 134us; 19us; 138us; 19us; 140us; 19us; 9us; 65535us; 0us; 21us; 3us; 21us; 106us; 21us; 107us; 21us; 108us; 21us; 122us; 21us; 134us; 21us; 138us; 21us; 140us; 21us; 2us; 65535us; 71us; 72us; 86us; 87us; 2us; 65535us; 71us; 92us; 86us; 92us; 3us; 65535us; 71us; 96us; 86us; 96us; 94us; 95us; 3us; 65535us; 134us; 106us; 138us; 107us; 140us; 108us; 7us; 65535us; 106us; 109us; 107us; 109us; 108us; 109us; 122us; 123us; 134us; 110us; 138us; 110us; 140us; 110us; 7us; 65535us; 106us; 112us; 107us; 112us; 108us; 112us; 122us; 112us; 134us; 112us; 138us; 112us; 140us; 112us; 7us; 65535us; 106us; 115us; 107us; 115us; 108us; 115us; 122us; 115us; 134us; 115us; 138us; 115us; 140us; 115us; 7us; 65535us; 106us; 114us; 107us; 114us; 108us; 114us; 122us; 114us; 134us; 114us; 138us; 114us; 140us; 114us; 1us; 65535us; 124us; 125us; 2us; 65535us; 124us; 131us; 132us; 133us; 2us; 65535us; 124us; 134us; 132us; 134us; 2us; 65535us; 124us; 135us; 132us; 135us; 1us; 65535us; 125us; 128us; 12us; 65535us; 73us; 81us; 75us; 76us; 77us; 82us; 79us; 80us; 90us; 91us; 106us; 113us; 107us; 113us; 108us; 113us; 122us; 113us; 134us; 113us; 138us; 113us; 140us; 113us; 7us; 65535us; 106us; 117us; 107us; 117us; 108us; 117us; 122us; 117us; 134us; 117us; 138us; 117us; 140us; 117us; 7us; 65535us; 106us; 118us; 107us; 118us; 108us; 118us; 122us; 118us; 134us; 118us; 138us; 118us; 140us; 118us; 7us; 65535us; 106us; 116us; 107us; 116us; 108us; 116us; 122us; 116us; 134us; 116us; 138us; 116us; 140us; 116us; 3us; 65535us; 71us; 153us; 158us; 153us; 159us; 153us; 6us; 65535us; 24us; 33us; 38us; 39us; 41us; 42us; 50us; 63us; 65us; 66us; 68us; 69us; 27us; 65535us; 24us; 25us; 27us; 28us; 47us; 48us; 50us; 51us; 53us; 58us; 71us; 157us; 106us; 119us; 107us; 119us; 108us; 119us; 121us; 122us; 122us; 119us; 124us; 137us; 132us; 137us; 134us; 119us; 138us; 119us; 140us; 119us; 149us; 150us; 154us; 155us; 158us; 156us; 159us; 157us; 172us; 162us; 173us; 163us; 175us; 164us; 211us; 165us; 213us; 168us; 219us; 166us; 221us; 167us; 19us; 65535us; 25us; 169us; 28us; 169us; 48us; 169us; 51us; 169us; 58us; 169us; 119us; 169us; 122us; 169us; 137us; 169us; 150us; 169us; 155us; 169us; 156us; 169us; 157us; 169us; 162us; 169us; 163us; 169us; 164us; 169us; 165us; 169us; 166us; 169us; 167us; 169us; 168us; 169us; 29us; 65535us; 24us; 161us; 27us; 161us; 47us; 161us; 50us; 161us; 53us; 161us; 71us; 161us; 106us; 161us; 107us; 161us; 108us; 161us; 121us; 161us; 122us; 161us; 124us; 161us; 132us; 161us; 134us; 161us; 138us; 161us; 140us; 161us; 149us; 161us; 154us; 161us; 158us; 161us; 159us; 161us; 169us; 170us; 172us; 161us; 173us; 161us; 175us; 161us; 181us; 182us; 211us; 161us; 213us; 161us; 219us; 161us; 221us; 161us; 1us; 65535us; 178us; 179us; 30us; 65535us; 24us; 178us; 27us; 178us; 47us; 178us; 50us; 178us; 53us; 178us; 71us; 178us; 106us; 178us; 107us; 178us; 108us; 178us; 121us; 178us; 122us; 178us; 124us; 178us; 132us; 178us; 134us; 178us; 138us; 178us; 140us; 178us; 149us; 178us; 154us; 178us; 158us; 178us; 159us; 178us; 169us; 178us; 172us; 178us; 173us; 178us; 175us; 178us; 179us; 180us; 181us; 178us; 211us; 178us; 213us; 178us; 219us; 178us; 221us; 178us; 32us; 65535us; 24us; 205us; 27us; 205us; 47us; 205us; 50us; 205us; 53us; 205us; 71us; 205us; 106us; 205us; 107us; 205us; 108us; 205us; 121us; 205us; 122us; 205us; 124us; 205us; 132us; 205us; 134us; 205us; 138us; 205us; 140us; 205us; 149us; 205us; 154us; 205us; 158us; 205us; 159us; 205us; 169us; 205us; 172us; 205us; 173us; 205us; 175us; 205us; 179us; 205us; 181us; 205us; 190us; 205us; 197us; 205us; 211us; 205us; 213us; 205us; 219us; 205us; 221us; 205us; 2us; 65535us; 178us; 190us; 180us; 190us; 31us; 65535us; 24us; 189us; 27us; 189us; 47us; 189us; 50us; 189us; 53us; 189us; 71us; 189us; 106us; 189us; 107us; 189us; 108us; 189us; 121us; 189us; 122us; 189us; 124us; 189us; 132us; 189us; 134us; 189us; 138us; 189us; 140us; 189us; 149us; 189us; 154us; 189us; 158us; 189us; 159us; 189us; 169us; 189us; 172us; 189us; 173us; 189us; 175us; 189us; 179us; 189us; 181us; 189us; 190us; 191us; 211us; 189us; 213us; 189us; 219us; 189us; 221us; 189us; 2us; 65535us; 189us; 197us; 191us; 197us; 32us; 65535us; 24us; 196us; 27us; 196us; 47us; 196us; 50us; 196us; 53us; 196us; 71us; 196us; 106us; 196us; 107us; 196us; 108us; 196us; 121us; 196us; 122us; 196us; 124us; 196us; 132us; 196us; 134us; 196us; 138us; 196us; 140us; 196us; 149us; 196us; 154us; 196us; 158us; 196us; 159us; 196us; 169us; 196us; 172us; 196us; 173us; 196us; 175us; 196us; 179us; 196us; 181us; 196us; 190us; 196us; 197us; 198us; 211us; 196us; 213us; 196us; 219us; 196us; 221us; 196us; 34us; 65535us; 24us; 202us; 27us; 202us; 47us; 202us; 50us; 202us; 53us; 202us; 71us; 202us; 106us; 202us; 107us; 202us; 108us; 202us; 121us; 202us; 122us; 202us; 124us; 202us; 132us; 202us; 134us; 202us; 138us; 202us; 140us; 202us; 149us; 202us; 154us; 202us; 158us; 202us; 159us; 202us; 169us; 202us; 172us; 202us; 173us; 202us; 175us; 202us; 179us; 202us; 181us; 202us; 190us; 202us; 197us; 202us; 203us; 204us; 205us; 206us; 211us; 202us; 213us; 202us; 219us; 202us; 221us; 202us; 34us; 65535us; 24us; 209us; 27us; 209us; 47us; 209us; 50us; 209us; 53us; 209us; 71us; 209us; 106us; 209us; 107us; 209us; 108us; 209us; 121us; 209us; 122us; 209us; 124us; 209us; 132us; 209us; 134us; 209us; 138us; 209us; 140us; 209us; 149us; 209us; 154us; 209us; 158us; 209us; 159us; 209us; 169us; 209us; 172us; 209us; 173us; 209us; 175us; 209us; 179us; 209us; 181us; 209us; 190us; 209us; 197us; 209us; 203us; 209us; 205us; 209us; 211us; 209us; 213us; 209us; 219us; 209us; 221us; 209us; 34us; 65535us; 24us; 210us; 27us; 210us; 47us; 210us; 50us; 210us; 53us; 210us; 71us; 210us; 106us; 210us; 107us; 210us; 108us; 210us; 121us; 210us; 122us; 210us; 124us; 210us; 132us; 210us; 134us; 210us; 138us; 210us; 140us; 210us; 149us; 210us; 154us; 210us; 158us; 210us; 159us; 210us; 169us; 210us; 172us; 210us; 173us; 210us; 175us; 210us; 179us; 210us; 181us; 210us; 190us; 210us; 197us; 210us; 203us; 210us; 205us; 210us; 211us; 210us; 213us; 210us; 219us; 210us; 221us; 210us; 1us; 65535us; 213us; 214us; 34us; 65535us; 24us; 207us; 27us; 207us; 47us; 207us; 50us; 207us; 53us; 207us; 71us; 207us; 106us; 207us; 107us; 207us; 108us; 207us; 121us; 207us; 122us; 207us; 124us; 207us; 132us; 207us; 134us; 207us; 138us; 207us; 140us; 207us; 149us; 207us; 154us; 207us; 158us; 207us; 159us; 207us; 169us; 207us; 172us; 207us; 173us; 207us; 175us; 207us; 179us; 207us; 181us; 207us; 190us; 207us; 197us; 207us; 203us; 207us; 205us; 207us; 211us; 207us; 213us; 207us; 219us; 207us; 221us; 207us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 17us; 29us; 39us; 49us; 59us; 69us; 79us; 89us; 99us; 102us; 105us; 109us; 113us; 121us; 129us; 137us; 145us; 147us; 150us; 153us; 156us; 158us; 171us; 179us; 187us; 195us; 199us; 206us; 234us; 254us; 284us; 286us; 317us; 350us; 353us; 385us; 388us; 421us; 456us; 491us; 526us; 528us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 17us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 24us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 76us; 77us; 104us; 107us; 108us; 109us; 110us; 9us; 20us; 21us; 22us; 23us; 24us; 33us; 34us; 35us; 36us; 2us; 20us; 75us; 1us; 20us; 3us; 21us; 23us; 24us; 3us; 21us; 24us; 75us; 2us; 21us; 24us; 2us; 21us; 24us; 2us; 21us; 24us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 6us; 25us; 26us; 28us; 29us; 31us; 32us; 2us; 25us; 26us; 1us; 25us; 1us; 26us; 2us; 26us; 75us; 1us; 26us; 2us; 27us; 30us; 2us; 27us; 75us; 1us; 27us; 4us; 28us; 29us; 31us; 32us; 2us; 28us; 31us; 2us; 28us; 31us; 2us; 28us; 31us; 1us; 28us; 3us; 29us; 32us; 75us; 2us; 29us; 32us; 2us; 29us; 32us; 2us; 29us; 32us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 6us; 33us; 34us; 35us; 36us; 73us; 111us; 2us; 33us; 35us; 2us; 33us; 35us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 34us; 36us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 2us; 38us; 40us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 41us; 3us; 42us; 43us; 44us; 10us; 42us; 43us; 44us; 76us; 77us; 104us; 107us; 108us; 109us; 110us; 3us; 42us; 43us; 44us; 1us; 42us; 2us; 43us; 44us; 2us; 43us; 44us; 1us; 43us; 1us; 43us; 1us; 44us; 2us; 45us; 61us; 2us; 45us; 64us; 2us; 45us; 65us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 2us; 55us; 75us; 1us; 55us; 1us; 56us; 2us; 56us; 75us; 1us; 56us; 2us; 57us; 58us; 3us; 57us; 58us; 60us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 62us; 2us; 63us; 75us; 1us; 64us; 2us; 65us; 66us; 2us; 65us; 66us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 2us; 69us; 70us; 2us; 69us; 75us; 1us; 69us; 1us; 70us; 2us; 71us; 73us; 1us; 71us; 2us; 71us; 75us; 2us; 72us; 75us; 3us; 72us; 75us; 111us; 1us; 73us; 2us; 73us; 111us; 1us; 73us; 1us; 74us; 2us; 75us; 76us; 3us; 75us; 77us; 107us; 2us; 75us; 77us; 2us; 75us; 107us; 2us; 75us; 111us; 2us; 75us; 112us; 2us; 75us; 113us; 1us; 75us; 1us; 75us; 7us; 76us; 77us; 104us; 107us; 108us; 109us; 110us; 1us; 76us; 2us; 77us; 107us; 2us; 77us; 107us; 1us; 77us; 1us; 78us; 1us; 79us; 3us; 80us; 81us; 90us; 1us; 81us; 2us; 81us; 90us; 1us; 82us; 1us; 82us; 1us; 83us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 2us; 89us; 96us; 1us; 90us; 2us; 90us; 96us; 1us; 91us; 1us; 92us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 98us; 1us; 99us; 1us; 100us; 1us; 101us; 1us; 101us; 1us; 102us; 1us; 102us; 1us; 103us; 5us; 104us; 107us; 108us; 109us; 110us; 1us; 105us; 1us; 106us; 1us; 107us; 1us; 107us; 2us; 108us; 109us; 2us; 108us; 112us; 1us; 108us; 1us; 109us; 1us; 110us; 1us; 110us; 1us; 111us; 1us; 111us; 1us; 112us; 1us; 114us; 1us; 115us; 1us; 116us; 1us; 117us; 2us; 118us; 119us; 1us; 118us; 1us; 118us; 1us; 119us; 1us; 119us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 63us; 88us; 98us; 101us; 103us; 107us; 111us; 114us; 117us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 151us; 154us; 156us; 158us; 161us; 163us; 166us; 169us; 171us; 176us; 179us; 182us; 185us; 187us; 191us; 194us; 197us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 225us; 228us; 231us; 233us; 235us; 237us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 271us; 273us; 275us; 277us; 279us; 283us; 294us; 298us; 300us; 303us; 306us; 308us; 310us; 312us; 315us; 318us; 321us; 323us; 325us; 327us; 329us; 331us; 333us; 335us; 337us; 339us; 341us; 344us; 346us; 348us; 351us; 353us; 356us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 380us; 382us; 385us; 387us; 390us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 412us; 415us; 417us; 419us; 422us; 424us; 427us; 430us; 434us; 436us; 439us; 441us; 443us; 446us; 450us; 453us; 456us; 459us; 462us; 465us; 467us; 469us; 477us; 479us; 482us; 485us; 487us; 489us; 491us; 495us; 497us; 500us; 502us; 504us; 506us; 508us; 510us; 512us; 514us; 516us; 519us; 521us; 524us; 526us; 528us; 530us; 532us; 534us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 550us; 552us; 554us; 556us; 562us; 564us; 566us; 568us; 570us; 573us; 576us; 578us; 580us; 582us; 584us; 586us; 588us; 590us; 592us; 594us; 596us; 598us; 601us; 603us; 605us; 607us; |]
let _fsyacc_action_rows = 231
let _fsyacc_actionTableElements = [|3us; 32768us; 2us; 8us; 4us; 83us; 52us; 22us; 0us; 49152us; 0us; 16385us; 4us; 32768us; 1us; 4us; 2us; 8us; 4us; 83us; 52us; 22us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 3us; 32768us; 37us; 50us; 38us; 24us; 42us; 44us; 7us; 16488us; 18us; 173us; 20us; 213us; 37us; 50us; 38us; 24us; 39us; 172us; 41us; 217us; 42us; 44us; 12us; 32768us; 18us; 27us; 20us; 71us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 3us; 32768us; 2us; 26us; 23us; 176us; 24us; 177us; 0us; 16404us; 12us; 32768us; 17us; 35us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 3us; 32768us; 17us; 29us; 23us; 176us; 24us; 177us; 1us; 32768us; 10us; 30us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 2us; 32768us; 2us; 32us; 39us; 41us; 0us; 16405us; 1us; 32768us; 2us; 34us; 0us; 16406us; 1us; 32768us; 10us; 36us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 1us; 32768us; 39us; 38us; 1us; 32768us; 20us; 158us; 1us; 32768us; 2us; 40us; 0us; 16407us; 1us; 32768us; 20us; 158us; 1us; 32768us; 2us; 43us; 0us; 16408us; 8us; 32768us; 18us; 53us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 2us; 32768us; 2us; 46us; 39us; 47us; 0us; 16409us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 3us; 32768us; 2us; 49us; 23us; 176us; 24us; 177us; 0us; 16410us; 11us; 32768us; 20us; 159us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 3us; 32768us; 2us; 52us; 23us; 176us; 24us; 177us; 0us; 16411us; 12us; 32768us; 17us; 54us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 1us; 32768us; 10us; 55us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 2us; 32768us; 2us; 57us; 39us; 65us; 0us; 16412us; 3us; 32768us; 17us; 59us; 23us; 176us; 24us; 177us; 1us; 32768us; 10us; 60us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 2us; 32768us; 2us; 62us; 39us; 68us; 0us; 16413us; 1us; 32768us; 2us; 64us; 0us; 16414us; 1us; 32768us; 20us; 158us; 1us; 32768us; 2us; 67us; 0us; 16415us; 1us; 32768us; 20us; 158us; 1us; 32768us; 2us; 70us; 0us; 16416us; 13us; 32768us; 19us; 77us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 50us; 93us; 52us; 98us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 1us; 32768us; 19us; 73us; 2us; 32768us; 12us; 139us; 16us; 74us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 1us; 32768us; 12us; 139us; 0us; 16417us; 2us; 32768us; 12us; 139us; 16us; 78us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 1us; 32768us; 12us; 139us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 1us; 32768us; 52us; 84us; 1us; 32768us; 38us; 85us; 1us; 32768us; 20us; 86us; 2us; 32768us; 50us; 93us; 52us; 97us; 1us; 32768us; 19us; 88us; 1us; 32768us; 16us; 89us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 1us; 32768us; 12us; 139us; 0us; 16421us; 1us; 16422us; 44us; 94us; 0us; 16423us; 1us; 32768us; 52us; 97us; 0us; 16424us; 0us; 16425us; 1us; 32768us; 42us; 99us; 5us; 16488us; 18us; 173us; 20us; 213us; 39us; 172us; 41us; 217us; 42us; 99us; 8us; 32768us; 18us; 101us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 0us; 16426us; 1us; 32768us; 17us; 102us; 8us; 32768us; 10us; 103us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 7us; 32768us; 45us; 15us; 46us; 14us; 47us; 12us; 48us; 13us; 49us; 10us; 50us; 9us; 51us; 11us; 0us; 16427us; 0us; 16428us; 19us; 16445us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 19us; 16448us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 20us; 32768us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 11us; 141us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 3us; 32768us; 2us; 120us; 23us; 176us; 24us; 177us; 0us; 16439us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 21us; 32768us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 23us; 176us; 24us; 177us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16440us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 3us; 32768us; 8us; 132us; 9us; 138us; 11us; 126us; 1us; 32768us; 2us; 127us; 0us; 16441us; 1us; 32768us; 11us; 129us; 1us; 32768us; 2us; 130us; 0us; 16442us; 0us; 16443us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16444us; 19us; 32768us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 1us; 32768us; 14us; 136us; 0us; 16446us; 2us; 16447us; 23us; 176us; 24us; 177us; 19us; 32768us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 1us; 32768us; 2us; 140us; 20us; 32768us; 2us; 8us; 4us; 83us; 5us; 147us; 6us; 145us; 7us; 149us; 11us; 143us; 12us; 139us; 13us; 121us; 15us; 124us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 23us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 1us; 32768us; 2us; 142us; 0us; 16449us; 1us; 32768us; 2us; 144us; 0us; 16450us; 1us; 32768us; 2us; 146us; 0us; 16451us; 1us; 32768us; 2us; 148us; 0us; 16452us; 12us; 32768us; 2us; 152us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 3us; 32768us; 2us; 151us; 23us; 176us; 24us; 177us; 0us; 16453us; 0us; 16454us; 2us; 32768us; 19us; 160us; 44us; 154us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 2us; 16455us; 23us; 176us; 24us; 177us; 2us; 16456us; 23us; 176us; 24us; 177us; 3us; 16456us; 19us; 220us; 23us; 176us; 24us; 177us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16457us; 0us; 16458us; 2us; 16460us; 23us; 176us; 24us; 177us; 3us; 32768us; 17us; 174us; 23us; 176us; 24us; 177us; 2us; 16461us; 23us; 176us; 24us; 177us; 3us; 32768us; 17us; 212us; 23us; 176us; 24us; 177us; 3us; 32768us; 19us; 220us; 23us; 176us; 24us; 177us; 2us; 16496us; 23us; 176us; 24us; 177us; 2us; 16497us; 23us; 176us; 24us; 177us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16459us; 4us; 16488us; 18us; 173us; 20us; 213us; 39us; 172us; 41us; 217us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 1us; 16491us; 39us; 175us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16462us; 0us; 16463us; 8us; 16464us; 25us; 188us; 26us; 187us; 27us; 186us; 28us; 184us; 30us; 185us; 31us; 183us; 35us; 194us; 36us; 195us; 10us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 2us; 16465us; 35us; 194us; 36us; 195us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16466us; 0us; 16467us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 3us; 16473us; 32us; 201us; 33us; 199us; 34us; 200us; 10us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 3us; 16474us; 32us; 201us; 33us; 199us; 34us; 200us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 0us; 16478us; 0us; 16479us; 10us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 0us; 16480us; 0us; 16481us; 0us; 16482us; 0us; 16483us; 0us; 16484us; 7us; 32768us; 20us; 219us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 0us; 16485us; 7us; 32768us; 20us; 219us; 40us; 226us; 52us; 208us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 0us; 16486us; 0us; 16487us; 3us; 16488us; 18us; 211us; 20us; 213us; 41us; 217us; 0us; 16489us; 0us; 16490us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16491us; 12us; 32768us; 19us; 216us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 2us; 32768us; 19us; 215us; 44us; 221us; 0us; 16492us; 0us; 16493us; 1us; 32768us; 3us; 218us; 0us; 16494us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16495us; 11us; 32768us; 20us; 219us; 22us; 203us; 35us; 192us; 36us; 193us; 40us; 226us; 52us; 171us; 53us; 224us; 54us; 225us; 55us; 223us; 56us; 222us; 57us; 181us; 0us; 16498us; 0us; 16499us; 0us; 16500us; 0us; 16501us; 2us; 32768us; 45us; 229us; 47us; 227us; 1us; 32768us; 54us; 228us; 0us; 16502us; 1us; 32768us; 54us; 230us; 0us; 16503us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 6us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 33us; 41us; 54us; 58us; 59us; 72us; 76us; 78us; 86us; 89us; 90us; 92us; 93us; 95us; 103us; 105us; 107us; 109us; 110us; 112us; 114us; 115us; 124us; 127us; 128us; 140us; 144us; 145us; 157us; 161us; 162us; 175us; 177us; 185us; 188us; 189us; 193us; 195us; 203us; 206us; 207us; 209us; 210us; 212us; 214us; 215us; 217us; 219us; 220us; 234us; 236us; 239us; 247us; 249us; 250us; 253us; 261us; 263us; 264us; 265us; 266us; 268us; 270us; 272us; 275us; 277us; 279us; 287us; 289us; 290us; 292us; 293us; 295us; 296us; 297us; 299us; 305us; 314us; 315us; 317us; 326us; 334us; 335us; 336us; 356us; 376us; 397us; 398us; 399us; 400us; 401us; 402us; 403us; 404us; 405us; 406us; 407us; 411us; 412us; 424us; 446us; 447us; 459us; 463us; 465us; 466us; 468us; 470us; 471us; 472us; 484us; 485us; 505us; 507us; 508us; 511us; 531us; 533us; 554us; 556us; 557us; 559us; 560us; 562us; 563us; 565us; 566us; 579us; 583us; 584us; 585us; 588us; 600us; 603us; 606us; 610us; 622us; 634us; 635us; 636us; 639us; 643us; 646us; 650us; 654us; 657us; 660us; 672us; 673us; 678us; 690us; 702us; 704us; 716us; 717us; 718us; 727us; 738us; 741us; 753us; 754us; 755us; 756us; 757us; 758us; 759us; 760us; 764us; 775us; 779us; 780us; 781us; 782us; 783us; 784us; 795us; 796us; 797us; 798us; 799us; 800us; 808us; 809us; 817us; 818us; 819us; 823us; 824us; 825us; 837us; 838us; 851us; 854us; 855us; 856us; 858us; 859us; 871us; 872us; 884us; 885us; 886us; 887us; 888us; 891us; 893us; 894us; 896us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 8us; 4us; 9us; 10us; 4us; 6us; 4us; 7us; 8us; 4us; 9us; 10us; 8us; 7us; 6us; 5us; 9us; 1us; 1us; 3us; 1us; 3us; 6us; 5us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 5us; 1us; 3us; 2us; 2us; 1us; 2us; 5us; 4us; 2us; 2us; 3us; 2us; 3us; 1us; 3us; 1us; 3us; 3us; 6us; 1us; 1us; 1us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 4us; 4us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 19us; 20us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 29us; 29us; 30us; 30us; 31us; 32us; 32us; 32us; 32us; 33us; 33us; 34us; 34us; 34us; 35us; 35us; 35us; 35us; 35us; 35us; 36us; 36us; 37us; 37us; 38us; 38us; 39us; 39us; 40us; 40us; 40us; 41us; 41us; 41us; 42us; 42us; 42us; 42us; 43us; 43us; 43us; 43us; 44us; 45us; 45us; 46us; 46us; 46us; 46us; 46us; 46us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 16423us; 65535us; 16424us; 16425us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 16427us; 16428us; 65535us; 65535us; 65535us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 65535us; 16439us; 65535us; 65535us; 16440us; 65535us; 65535us; 65535us; 16441us; 65535us; 65535us; 16442us; 16443us; 65535us; 16444us; 65535us; 65535us; 16446us; 65535us; 65535us; 65535us; 65535us; 65535us; 16449us; 65535us; 16450us; 65535us; 16451us; 65535us; 16452us; 65535us; 65535us; 16453us; 16454us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16457us; 16458us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16459us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 16463us; 65535us; 65535us; 65535us; 65535us; 16466us; 16467us; 16468us; 16469us; 16470us; 16471us; 16472us; 65535us; 65535us; 65535us; 16475us; 16476us; 16477us; 16478us; 16479us; 65535us; 16480us; 16481us; 16482us; 16483us; 16484us; 65535us; 16485us; 65535us; 16486us; 16487us; 65535us; 16489us; 16490us; 65535us; 16491us; 65535us; 65535us; 16492us; 16493us; 65535us; 16494us; 65535us; 16495us; 65535us; 16498us; 16499us; 16500us; 16501us; 65535us; 65535us; 16502us; 65535us; 16503us; |]
let _fsyacc_reductions ()  =    [| 
# 578 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 587 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "parser.y"
                                      _1 
                   )
# 122 "parser.y"
                 : Program));
# 598 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "parser.y"
                                                        _1 
                   )
# 124 "parser.y"
                 : Program));
# 609 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "parser.y"
                                                     _1 @ [_2] 
                   )
# 126 "parser.y"
                 : Declaration list));
# 621 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "parser.y"
                                                     [_1] 
                   )
# 127 "parser.y"
                 : Declaration list));
# 632 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : VariableDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "parser.y"
                                                     Ast.VariableDecl _1 
                   )
# 129 "parser.y"
                 : Declaration));
# 643 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "parser.y"
                                                     Ast.DeclNop
                   )
# 130 "parser.y"
                 : Declaration));
# 653 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "parser.y"
                                            Ast.Void 
                   )
# 132 "parser.y"
                 : TypeSpec));
# 663 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "parser.y"
                                       Ast.Int 
                   )
# 133 "parser.y"
                 : TypeSpec));
# 673 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "parser.y"
                                       Ast.Float 
                   )
# 134 "parser.y"
                 : TypeSpec));
# 683 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "parser.y"
                                       Ast.Char 
                   )
# 135 "parser.y"
                 : TypeSpec));
# 693 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "parser.y"
                                       Ast.Byte 
                   )
# 136 "parser.y"
                 : TypeSpec));
# 703 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "parser.y"
                                       Ast.String 
                   )
# 137 "parser.y"
                 : TypeSpec));
# 713 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "parser.y"
                                       Ast.Text 
                   )
# 138 "parser.y"
                 : TypeSpec));
# 723 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fixed_scalar_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "parser.y"
                                                     _1 
                   )
# 141 "parser.y"
                 : 'fixed_decl));
# 734 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fixed_array_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "parser.y"
                                              _1 
                   )
# 142 "parser.y"
                 : 'fixed_decl));
# 745 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'scalar_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "parser.y"
                                                  _1 
                   )
# 144 "parser.y"
                 : VariableDecl));
# 756 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'array_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "parser.y"
                                        _1 
                   )
# 145 "parser.y"
                 : VariableDecl));
# 767 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fixed_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "parser.y"
                                        _1 
                   )
# 146 "parser.y"
                 : VariableDecl));
# 778 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedure_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "parser.y"
                                            _1 
                   )
# 147 "parser.y"
                 : VariableDecl));
# 789 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "parser.y"
                           Ast.ScalarDecl(ScalarFlags.STATIC, idref _1, None, Some(_3)) 
                   )
# 150 "parser.y"
                 : 'fixed_scalar_decl));
# 801 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "parser.y"
                           Ast.ArrayDecl(flag_static_fixed, idref _1, Some(_4), Some(_7), None) 
                   )
# 155 "parser.y"
                 : 'fixed_array_decl));
# 814 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "parser.y"
                           Ast.ArrayDecl(flag_static_fixed, idref _1, None, None, Some(_3) )
                   )
# 159 "parser.y"
                 : 'fixed_array_decl));
# 826 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "parser.y"
                           Ast.ArrayDecl(flag_static_fixed, idref _1, None, Some(_6), Some(_8)) 
                   )
# 165 "parser.y"
                 : 'fixed_array_decl));
# 839 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "parser.y"
                           Ast.ArrayDecl(flag_static_fixed, idref _1, Some(_4), Some(_7), Some(_9)) 
                   )
# 169 "parser.y"
                 : 'fixed_array_decl));
# 853 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "parser.y"
                           Ast.ScalarDecl(ScalarFlags.NONE, idref _1, Some(_3), None) 
                   )
# 172 "parser.y"
                 : 'scalar_decl));
# 865 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "parser.y"
                           Ast.ScalarDecl(ScalarFlags.NONE, idref _1, Some(_3), Some(_5)) 
                   )
# 176 "parser.y"
                 : 'scalar_decl));
# 878 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "parser.y"
                           Ast.ScalarDecl(ScalarFlags.NONE, idref _1, None, Some(_3))
                   )
# 180 "parser.y"
                 : 'scalar_decl));
# 890 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.NONE, idref _1, None, Some(_6), None) 
                   )
# 185 "parser.y"
                 : 'array_decl));
# 902 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.FIXED, idref _1, Some(_4), Some(_7), None) 
                   )
# 189 "parser.y"
                 : 'array_decl));
# 915 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.NONE, idref _1, None, None, Some(_3))
                   )
# 193 "parser.y"
                 : 'array_decl));
# 927 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.NONE, idref _1, None, Some(_6), Some(_8)) 
                   )
# 197 "parser.y"
                 : 'array_decl));
# 940 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.FIXED, idref _1, Some(_4), Some(_7), Some(_9)) 
                   )
# 201 "parser.y"
                 : 'array_decl));
# 954 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "parser.y"
                           Ast.ProcedureDecl(ProcFlags.INTERNAL, idref _1, _4, _7, _8)
                   )
# 205 "parser.y"
                 : 'procedure_decl));
# 968 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "parser.y"
                           Ast.ProcedureDecl(ProcFlags.INTERNAL, idref _1, [], _6, _7)
                   )
# 208 "parser.y"
                 : 'procedure_decl));
# 981 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "parser.y"
                           Ast.ProcedureDecl(ProcFlags.INTERNAL, idref _1, _4, Ast.Void, _6)
                   )
# 211 "parser.y"
                 : 'procedure_decl));
# 994 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "parser.y"
                           Ast.ProcedureDecl(ProcFlags.INTERNAL, idref _1, [], Ast.Void, _5)
                   )
# 214 "parser.y"
                 : 'procedure_decl));
# 1006 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "parser.y"
                           Ast.ProcedureDecl(ProcFlags.PUBLIC, idref _2, _5, _8, _9)
                   )
# 219 "parser.y"
                 : 'procedure_decl));
# 1020 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "parser.y"
                                                   _1 
                   )
# 221 "parser.y"
                 : Parameters));
# 1031 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "parser.y"
                                     [] 
                   )
# 223 "parser.y"
                 : Parameters));
# 1041 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Parameters)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : VariableDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "parser.y"
                                                                      _1 @ [_3] 
                   )
# 225 "parser.y"
                 : Parameters));
# 1053 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : VariableDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "parser.y"
                                       [_1] 
                   )
# 226 "parser.y"
                 : Parameters));
# 1064 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "parser.y"
                           Ast.ScalarDecl(ScalarFlags.NONE, idref _1, Some _3, None) 
                   )
# 229 "parser.y"
                 : VariableDecl));
# 1076 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.NONE, idref _1, None, Some _6, None) 
                   )
# 232 "parser.y"
                 : VariableDecl));
# 1088 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : TypeSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "parser.y"
                           Ast.ArrayDecl(ArrayFlags.NONE, idref _1, None, Some _5, None) 
                   )
# 235 "parser.y"
                 : VariableDecl));
# 1100 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "parser.y"
                                                  _1 @ [_2] 
                   )
# 237 "parser.y"
                 : Statement list));
# 1112 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "parser.y"
                                                  [_1] 
                   )
# 238 "parser.y"
                 : Statement list));
# 1123 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "parser.y"
                                                Ast.Declaration _1 
                   )
# 240 "parser.y"
                 : Statement));
# 1134 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "parser.y"
                                                Ast.SExpression _1 
                   )
# 241 "parser.y"
                 : Statement));
# 1145 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CompoundStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "parser.y"
                                                Ast.CompoundStatement _1 
                   )
# 242 "parser.y"
                 : Statement));
# 1156 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IfStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "parser.y"
                                                Ast.IfStatement _1 
                   )
# 243 "parser.y"
                 : Statement));
# 1167 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : WhileStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "parser.y"
                                                Ast.WhileStatement _1 
                   )
# 244 "parser.y"
                 : Statement));
# 1178 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "parser.y"
                                                Ast.ReturnStatement _1 
                   )
# 245 "parser.y"
                 : Statement));
# 1189 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : unit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "parser.y"
                                                Ast.BreakStatement 
                   )
# 246 "parser.y"
                 : Statement));
# 1200 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : unit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "parser.y"
                                                Ast.ContinueStatement 
                   )
# 247 "parser.y"
                 : Statement));
# 1211 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "parser.y"
                                       Ast.Expression _1 
                   )
# 249 "parser.y"
                 : SExpression));
# 1222 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "parser.y"
                                                      (_2, _3) 
                   )
# 251 "parser.y"
                 : WhileStatement));
# 1234 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_clause_s)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "parser.y"
                                                                     (_2, None) 
                   )
# 253 "parser.y"
                 : IfStatement));
# 1245 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_clause_s)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'else_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "parser.y"
                                                                     (_2, Some(_3)) 
                   )
# 254 "parser.y"
                 : IfStatement));
# 1257 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "parser.y"
                                                  [_1] 
                   )
# 256 "parser.y"
                 : 'cond_clause_s));
# 1268 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_clause_s)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "parser.y"
                                                             _1 @ [_3] 
                   )
# 257 "parser.y"
                 : 'cond_clause_s));
# 1280 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_part)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "parser.y"
                                                        Ast.ConditionalClause(_1, _2) 
                   )
# 259 "parser.y"
                 : 'cond_clause));
# 1292 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "parser.y"
                                                    _1 
                   )
# 261 "parser.y"
                 : 'cond_part));
# 1303 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "parser.y"
                                       _1 
                   )
# 263 "parser.y"
                 : 'condition));
# 1314 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "parser.y"
                                                   _2 
                   )
# 265 "parser.y"
                 : 'else_opt));
# 1325 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "parser.y"
                                                                        _3 
                   )
# 267 "parser.y"
                 : CompoundStatement));
# 1336 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "parser.y"
                                                     [] 
                   )
# 268 "parser.y"
                 : CompoundStatement));
# 1346 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "parser.y"
                                                
                   )
# 270 "parser.y"
                 : unit));
# 1356 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "parser.y"
                                                      
                   )
# 272 "parser.y"
                 : unit));
# 1366 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "parser.y"
                                                             Some(_2) 
                   )
# 275 "parser.y"
                 : Expression option));
# 1377 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "parser.y"
                                                 None 
                   )
# 276 "parser.y"
                 : Expression option));
# 1387 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "parser.y"
                                                       _1 @ [_3] 
                   )
# 278 "parser.y"
                 : 'expr_list));
# 1399 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "parser.y"
                                  [_1] 
                   )
# 279 "parser.y"
                 : 'expr_list));
# 1410 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "parser.y"
                                                          _2 
                   )
# 281 "parser.y"
                 : 'aggregate));
# 1421 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "parser.y"
                                      _1 
                   )
# 283 "parser.y"
                 : Expression));
# 1432 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'logical)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "parser.y"
                                                   Ast.BinaryExpression(_1, _2, _3) 
                   )
# 284 "parser.y"
                 : Expression));
# 1445 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "parser.y"
                           Ast.ScalarAssignExpression(idref _1, _3) 
                   )
# 286 "parser.y"
                 : Expression));
# 1457 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "parser.y"
                           Ast.ArrayAssignExpression(idref _1, _3, _6) 
                   )
# 289 "parser.y"
                 : Expression));
# 1470 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "parser.y"
                                       Ast.CondAnd 
                   )
# 292 "parser.y"
                 : 'logical));
# 1480 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "parser.y"
                                       Ast.CondOr 
                   )
# 293 "parser.y"
                 : 'logical));
# 1490 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "parser.y"
                                          _1 
                   )
# 296 "parser.y"
                 : 'relation));
# 1501 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'relational)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "parser.y"
                                                          Ast.BinaryExpression(_1, _2, _3) 
                   )
# 302 "parser.y"
                 : 'relation));
# 1514 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "parser.y"
                                           
                             yyerror "Multiple relation expressions"
                             _2
                         
                   )
# 303 "parser.y"
                 : 'relation));
# 1528 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "parser.y"
                                                 Ast.Eq 
                   )
# 308 "parser.y"
                 : 'relational));
# 1538 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "parser.y"
                                                 Ast.LtEq 
                   )
# 309 "parser.y"
                 : 'relational));
# 1548 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "parser.y"
                                                 Ast.NotEq 
                   )
# 310 "parser.y"
                 : 'relational));
# 1558 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "parser.y"
                                                 Ast.Lt 
                   )
# 311 "parser.y"
                 : 'relational));
# 1568 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "parser.y"
                                                 Ast.GtEq 
                   )
# 312 "parser.y"
                 : 'relational));
# 1578 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "parser.y"
                                                 Ast.Gt 
                   )
# 313 "parser.y"
                 : 'relational));
# 1588 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "parser.y"
                                      _1 
                   )
# 315 "parser.y"
                 : 'equation));
# 1599 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'combinatory)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "parser.y"
                                                       Ast.BinaryExpression(_1, _2, _3) 
                   )
# 316 "parser.y"
                 : 'equation));
# 1612 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 318 "parser.y"
                                   Ast.Identity 
                   )
# 318 "parser.y"
                 : 'unary));
# 1622 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "parser.y"
                                   Ast.Negate 
                   )
# 319 "parser.y"
                 : 'unary));
# 1632 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "parser.y"
                                         Ast.Add 
                   )
# 321 "parser.y"
                 : 'combinatory));
# 1642 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "parser.y"
                                         Ast.Sub 
                   )
# 322 "parser.y"
                 : 'combinatory));
# 1652 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "parser.y"
                                    _1 
                   )
# 324 "parser.y"
                 : 'term));
# 1663 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'sequential)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "parser.y"
                                                    Ast.BinaryExpression(_1, _2, _3) 
                   )
# 325 "parser.y"
                 : 'term));
# 1676 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "parser.y"
                                            Ast.Mul 
                   )
# 327 "parser.y"
                 : 'sequential));
# 1686 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "parser.y"
                                            Ast.Div 
                   )
# 328 "parser.y"
                 : 'sequential));
# 1696 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "parser.y"
                                            Ast.Mod 
                   )
# 329 "parser.y"
                 : 'sequential));
# 1706 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "parser.y"
                                        _1 
                   )
# 331 "parser.y"
                 : 'factor));
# 1717 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 332 "parser.y"
                                             Ast.UnaryExpression(Ast.LogicalNot, _2)
                   )
# 332 "parser.y"
                 : 'factor));
# 1728 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'unary)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 333 "parser.y"
                                           Ast.UnaryExpression(_1, _2) 
                   )
# 333 "parser.y"
                 : 'factor));
# 1740 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "parser.y"
                                        Ast.LiteralExpression _1 
                   )
# 335 "parser.y"
                 : 'primary));
# 1751 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "parser.y"
                                        Ast.IdentifierExpression(idref _1) 
                   )
# 336 "parser.y"
                 : 'primary));
# 1762 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'qualified)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "parser.y"
                                        _1 
                   )
# 337 "parser.y"
                 : 'primary));
# 1773 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'paren_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "parser.y"
                                           _1 
                   )
# 338 "parser.y"
                 : 'primary));
# 1784 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "parser.y"
                           Ast.ArrayIdentifierExpression(idref _1, _3) 
                   )
# 341 "parser.y"
                 : 'qualified));
# 1796 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 343 "parser.y"
                           Ast.ProcedureCallExpression(idref _1, _3)
                   )
# 343 "parser.y"
                 : 'qualified));
# 1808 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 346 "parser.y"
                           Ast.ProcedureCallExpression(idref _1, [])
                   )
# 346 "parser.y"
                 : 'qualified));
# 1819 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "parser.y"
                           Ast.ArrayCountExpression({ Identifier = _1} )
                   )
# 348 "parser.y"
                 : 'qualified));
# 1830 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 352 "parser.y"
                                                         _2 
                   )
# 352 "parser.y"
                 : 'paren_primary));
# 1841 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Arguments)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "parser.y"
                                                       _1 @ [_3] 
                   )
# 354 "parser.y"
                 : Arguments));
# 1853 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 355 "parser.y"
                                                       [_1] 
                   )
# 355 "parser.y"
                 : Arguments));
# 1864 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 357 "parser.y"
                                              Ast.IntLiteral(int _1) 
                   )
# 357 "parser.y"
                 : Literal));
# 1875 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 358 "parser.y"
                                              Ast.FloatLiteral(float32 _1) 
                   )
# 358 "parser.y"
                 : Literal));
# 1886 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "parser.y"
                                              Ast.ByteLiteral(byte _1) 
                   )
# 359 "parser.y"
                 : Literal));
# 1897 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 360 "parser.y"
                                              Ast.StringLiteral _1 
                   )
# 360 "parser.y"
                 : Literal));
# 1908 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "parser.y"
                                                         Ast.CharLiteral(char _3) 
                   )
# 361 "parser.y"
                 : Literal));
# 1919 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 362 "parser.y"
                                                         Ast.TextLiteral _3 
                   )
# 362 "parser.y"
                 : Literal));
|]
# 1931 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 60;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
