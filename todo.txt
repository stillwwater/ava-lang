# Compiler

+ [OK] FIX: recursion (compiler)
+ FIX: list.count works for Aggregate but not for arrays
+ FIX: Aggregate cause memory access errors
+ [OK] FIX: return expression "Expected memory addressable variable..."
+ [OK] Handle system calls, deallocate parameters
+ [OK] Handle procedure without explicit return statement
+ Temps need types
+ [OK] Add syntax to support external calls with generic or
  unchecked parameters.
+ Add generic retrun value for external calls
+ Return array types
+ Extern generics array vs element

Fundamental
+ [OK] Variables, constants, operators, types
+ [Parser OK] Functions, if, while
+ [Parser OK] Else if
+ [Parser OK] Nested functions?
+ [Parser OK] Static arrays/strings
+ [Parser OK] Arrays/strings (heap variables)
+ [Parser OK] Implicit types (x := 1)
+ [Parser OK] Packed strings

Stage 2
+ Structs
+ Casting
+ Auto deallocate memory
+ Implicit struct constructors
+ For loops
+ switch
+ Type alias
+ Enums
+ Using/imports/exports
+ Array reassign (alloc, assign)

Extra
+ Serialize static variables with serialize header section
+ out parameters
+ ref parameters (&)
+ named parameters
+ Any type
+ Function as types (function references)

IR Compiler
===========

+ Optimize unary minus constant
+ Constant folding
+ Initialize declarations to zero
+ Maybe we need to differentiate loading a value from the stack vs
  loading the value pointed by a pointer on the stack

Semantic Analysis
=================

+ Aggregate size expression not in expression table
+ FIX: array[1] = int_literal gives a type_error because it expects
  an [] int instead.
    -- This should not throw an error
    array : [4] of int
    array[1] = 5 -- TypeError: Expected [] of int, got int
+ Handle [] char being equivalent to str
+ [OK] FIX: Procedure calls type checking identifiers
+ [OK] Declarations with expressions
+ Global declarations with expressions
+ [OK] Implicit types
+ [OK] Array implicit types
+ Constant scalars can be assigned to an expression so long as the
  expression resolves to a constant (composed of literals and other
  constant scalars)
+ Fixed scalars don't need to be immutable, but are allocated in the
  .data section. Compiler should issue warning if they are declared
  in a local scope since they are global variables.

Parser
======

+ FIX: n-1
+ Remove text type, use [] of byte with #pack
+ FIX: Fixed scalars need type
+ Import/Export statements
+ Derivative as lexer tokens to make '# der' illegal if favor of '#der'
+ Packed strings: Remove text type in favor of #pack derivative
+ [OK] Declare array with initialized values
+ FIX: Inline comments fail if there is a declaration on the following line
+ [OK] FIX: Comments only work when there's no empty lines
+ [OK] FIX: Registering quotes in strings
+ [OK] Print ast
+ FIX: handling of empty lines with comments
+ Error messages
+ Identifiers with numbers
+ [OK] If statements need to have separate handling of compound statements
+ do and then should be allowed to be on the next line
+ [OK] Declarations -> statements

Assembler Spec
==============

+ Cells instead of bytes
+ Public function table (exports)
+ Extern function table (imports)

+ [OK] Byte-code header section
    - 0xff: signature (assembler version)
    - 0xffff: initial_stack_size
    - 0xffff: initial_heap_size
    - 0xffffffff: dat_ptr

+ [OK] Push IMM instruction
+ [OK] JLE, JGE instructions
+ Register opcode packing

Assembler
=========

+ [OK] Floating point support
+ [OK] Declare memory space in .dat
+ [OK] BUG: signed byte

    [0]                 magic
    [1]                 version
    [2]                 stack_heap_size (in words)
    [4]                 text_ptr
    [8]                 dat_ptr
    [12]                mut_ptr
    [14]                import_table_ptr
    [16]                export_table_ptr
    [import_table_ptr]  import_table
    [export_table_ptr]  export_table
    ---
    [text_ptr]          .text
    [dat_ptr]           .dat
    [mut_ptr]           .mut
    [cpu.heap]          heap
    [cpu.hp]            stack
    [len(memory)]
    [MAX_MEMORY]
